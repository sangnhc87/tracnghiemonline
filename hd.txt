Tuyệt vời! Rất vui khi biết rằng bạn đã thành công với các bước trước đó. Vấn đề `INTERNAL` đã được giải quyết.

Giờ đây, chúng ta sẽ tập trung vào các yêu cầu chi tiết hơn:

1.  **Chấm điểm cho 3 loại câu hỏi (Trắc nghiệm, True-False, Trả lời ngắn):**
    *   Logic chấm điểm hiện tại trong `firebase-functions/index.js` của bạn đã rất linh hoạt và chính xác cho việc chấm điểm từng câu hỏi dựa trên `keys` và `cores` riêng biệt.
    *   **Trắc nghiệm (MC):** `keys` là 'A', 'B', 'C', 'D'. `cores` là một số (ví dụ: '1'). Logic hiện tại đã đúng: nếu đáp án chọn khớp với `key`, cộng `cores`.
    *   **True-False (TF):** `keys` là chuỗi 'T'/'F' (ví dụ: 'TTFF'). `cores` là chuỗi các điểm phân tách bằng dấu phẩy (ví dụ: '0,0.1,0.25,0.5,1'). Logic hiện tại đã rất tốt: nó đếm số đáp án con đúng (`countCorrect`) và lấy điểm tương ứng từ mảng `tfCoreValues` (ví dụ: `tfCoreValues[countCorrect - 1]`).
        *   Để đạt được thang điểm `0/4=0, 1/4=0.1, 2/4=0.25, 3/4=0.5, 4/4=1`, bạn cần đảm bảo khi nhập đề thi, chuỗi `cores` cho câu TF có 4 ý con phải là: `0.1,0.25,0.5,1`. (Nếu 0 đúng thì 0 điểm là mặc định).
    *   **Trả lời ngắn (Numeric):** `keys` là một số (ví dụ: '3.14'). `cores` là mộtindex.js` vì nó hiệu quả và linh hoạt. Quan trọng là bạn phải nhập `cores` cho câu TF đúng định dạng `điểm_cho_1_đúng,điểm_cho_2_đúng,...` (ví dụ: `0.1,0.25,0.5,1`).

2.  **Nhận dạng loại câu (`Trắc Nghiệm`, `True-False`, `Trả lời ngắn`):**
    *   **Hiện trạng:** Việc nhận dạng loại câu đã dựa vào định dạng của `keys` trong cả `main.js` và `firebase-functions/index.js`.
    *   **Giải pháp:** Logic hiện tại đã khá mạnh mẽ (`"ABCD".includes(k) ? "MC" : /^[TF]+$/.test(k) ? "TF" : "Numeric"`). Tôi sẽ đảm bảo nó được áp dụng nhất quán và chính xác ở cả hai nơi.

3.  **Thiết kế Giao diện (Đặc biệt các nút và `img`):**
    *   **Yêu cầu:** Giao diện rộng 95% màn hình, hình ảnh rõ ràng, và các nút đẹp như trong mã GAS.
    *   **Giải pháp:** Tôi sẽ chỉnh sửa mạnh mẽ file `public/css/style.css` để đưa vào các yếu tố thẩm mỹ từ mã GAS của bạn, đồng thời duy trì tính responsive và các biến CSS đã có. Điều này bao gồm:
        *   Tăng độ rộng tối đa của các container chính (app, quiz).
        *   Tối ưu hóa hình ảnh để tự động co giãn và hiển thị đẹp.
        *   Thiết kế lại chi tiết các nút chọn đáp án (MC, TF, Numeric), nút "Chấm điểm & Nộp bài", và màn hình đăng nhập/kết quả theo phong cách GAS.

4.  **Không làm hết câu KHÔNG ĐƯỢC NỘP BÀI:**
    *   **Hiện trạng:** Logic `if (unanswered.length > 0){ showUnansweredDialog(unanswered); return; }` đã được triển khai trong `main.js`. Hàm `showUnansweredDialog` sử dụng SweetAlert2 và sau khi hiển thị dialog, nó `return` ngay lập tức, ngăn chặn việc nộp bài.
    *   **Giải pháp:** Logic này đã hoạt động đúng theo yêu cầu. Tôi sẽ không thay đổi nó, chỉ xác nhận lại rằng nó đã được đặt chính xác.

---

### Bước 1: Cập nhật Firebase Functions (`firebase-functions/index.js`)

Không có thay đổi về logic chấm điểm trong `submitExam` so với phiên bản cuối cùng tôi đã cung cấp, vì logic hiện tại đã linh hoạt và chính xác cho cấu trúc điểm mà bạn mô tả. Tôi chỉ thêm một chút rõ ràng vào comments và đảm bảo rằng `processImagePlaceholders` không còn là vấn đề.

```javascript
// firebase-functions/index.js (Phiên bản Nâng cấp Hoàn chỉnh - Sửa lỗi INTERNAL và Nộp bài)

const functions = require("firebase-functions");
const admin = require("firebase-admin");

admin.initializeApp();
const db = admin.firestore();

/**
 * Phân tích một chuỗi văn bản lớn thành các câu hỏi và lời giải riêng biệt.
 * @param {string} rawText Chuỗi văn bản thô từ textarea.
 * @return {{questions: string[], explanations: string[]}} Một object chứa mảng câu hỏi và mảng lời giải.
 */
function parseExamContent(rawText) {
    if (!rawText || typeof rawText !== 'string') {
        return { questions: [], explanations: [] };
    }

    const questions = [];
    const explanations = [];

    // 1. Normalize newlines
    rawText = rawText.replace(/\r\n/g, '\n');

    // 2. Define the regex to find the start of a question.
    const questionStartPattern = /(?:^|\n\s*)([Cc][âĂaA][uUu]|[Bb][àÀaA][iI]|[Qq][uUu][eE][sS][tT][iI][oO][nN])\s*\d+[:.]?/g;

    // Use matchAll to get all occurrences of question starts and their indices.
    const matches = [...rawText.matchAll(questionStartPattern)];

    // 3. If no explicit question patterns are found, treat the entire content as one single question.
    if (matches.length === 0) {
        questions.push(rawText.trim());
        explanations.push('');
        return { questions, explanations };
    }

    // 4. Iterate through the matches to extract each question block.
    for (let i = 0; i < matches.length; i++) {
        const currentMatch = matches[i];
        const startIndex = currentMatch.index;

        const endIndex = (i + 1 < matches.length) ? matches[i + 1].index : rawText.length;

        let block = rawText.substring(startIndex, endIndex).trim();
        if (!block) continue;

        let questionText = block;
        let explanationText = '';

        // 5. Extract the explanation part from the current question block.
        const loigiaiRegex = /\\ số (ví dụ: '1'). Logic hiện tại đã đúng: so sánh số học với một khoảng dung sai nhỏ (`1e-9`) để tránh lỗi số thực.
    *   **Kết luận về chấm điểm:** Logic hiện tại là tối ưu và chính xác. Không cần thay đổi trong Firebase Functions. Tôi sẽ giải thích rõ cách nhập `cores` cho TF.

2.  **Thiết kế các nút và giao diện đẹp như bộ GAS bạn cung cấp:**
    *   Tôi đã xem xét CSS của bộ GAS và sẽ tích hợp các điểm nhấn thiết kế đó (màu sắc, bo góc, bóng đổ, hiệu ứng hover/active) vào file `public/css/style.css` của bạn.
    *   Điều chỉnh giao diện tổng thể để `width` rộng hơn và "to, rõ, đẹp".

3.  **Vấn đề `<img>` cần gọn và giao diện rộng 95% màn hình:**
    *   Tôi sẽ tăng `max-width` của các container chính (quiz, dashboard, modals) để chúng rộng hơn trên màn hình lớn.
    *   CSS cho `img` sẽ được tối ưu để chúng hiển thị gọn gàng và responsive.
    *   **Quan trọng:** Mã GAS của bạn có hàm `replace(/sangnhc1/g, 'gitlab.com/...')` để xử lý các placeholder hình ảnh. Logic này phải được thực hiện ở **frontend** (trong `public/js/main.js`) sau khi dữ liệu thô được tải về, vì Firebase Functions không biết về các URL này.

4.  **"Không làm hết câu KHÔNG ĐƯỢC NỘP BÀI":**
    *   Logic kiểm tra câu chưa trả lời đã có trong `main.js` (hàm `gradeQuiz` và `showUnansweredDialog`). Nó đã hoạt động đúng theo yêu cầu này (nếu có `unanswered` thì sẽ hiển thị dialog và `return`, không nộp bài).
    *   Lưu ý: Thông báo "Please fill out this field" là lỗi mặc định của trình duyệt do thuộc tính `required` trên input. Nó hiển thị *trước* khi JavaScript có thể kiểm soát. Đối với các trường đáp án trong bài thi, thường bạn **không** đặt `required` để học sinh có thể bỏ qua câu đó (và được 0 điểm).

---

### Bước 1: Cập nhật Firebase Functions (`firebase-functions/index.js`)

Không có thay đổi về logic chấm điểm so với phiên bản trước. Tôi chỉ thêm một vài bình luận làm rõ.

```javascript
// firebase-functions/index.js (Phiên bản Nâng cấp Hoàn chỉnh - Đã tối ưu chấm điểm và Fix image placeholders)

const functions = require("firebase-functions");
begin\{loigiai\}([\s\S]*?)\\end\{loigiai\}/i;
        const matchExplanation = questionText.match(loigiaiRegex);

        if (matchExplanation && matchExplanation[1]) {
            explanationText = matchExplanation[1].trim();
            questionText = questionText.replace(loigiaiRegex, '').trim();
        }

        questions.push(questionText);
        explanations.push(explanationText);
    }
    
    return { questions, explanations };
}


// --- CÁC HÀM XÁC THỰC & QUẢN LÝ TÀI KHOẢN GIÁO VIÊN ---
exports.onTeacherSignIn = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { uid, email, name } = context.auth.token;
  const userRef = db.collection("users").doc(uid);
  const userDoc = await userRef.get();
  if (!userDoc.exists) {
    const trialEndDate = admin.firestore.Timestamp.fromMillis(Date.now() + 180 * 24 * 60 * 60 * 1000);
    await userRef.set({ email, name: name || email, role: "teacher", trialEndDate, createdAt: admin.firestore.FieldValue.serverTimestamp(), teacherAlias: null });
    return { trialEndDate: trialEndDate.toDate().toISOString(), teacherAlias: null };
  } else {
    const existingData = userDoc.data();
    if (existingData.trialEndDate && !(existingData.trialEndDate instanceof admin.firestore.Timestamp)) {
        existingData.trialEndDate = admin.firestore.Timestamp.fromDate(new Date(existingData.trialEndDate));
    }
    return existingData;
  }
});

exports.updateTeacherAlias = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { uid } = context.auth;
  const newAlias = String(data.alias).trim().toLowerCase();
  if (!newAlias || newAlias.length < 3 || newconst admin = require("firebase-admin");

admin.initializeApp();
const db = admin.firestore();

/**
 * Phân tích một chuỗi văn bản lớn thành các câu hỏi và lời giải riêng biệt.
 * @param {string} rawText Chuỗi văn bản thô từ textarea.
 * @return {{questions: string[], explanations: string[]}} Một object chứa mảng câu hỏi và mảng lời giải.
 */
function parseExamContent(rawText) {
    if (!rawText || typeof rawText !== 'string') {
        return { questions: [], explanations: [] };
    }

    const questions = [];
    const explanations = [];

    rawText = rawText.replace(/\r\n/g, '\n');

    const questionStartPattern = /(?:^|\n\s*)([Cc][âĂaA][uUu]|[Bb][àÀaA][iI]|[Qq][uUu][eE][sS][tT][iI][oO][nN])\s*\d+[:.]?/g;

    const matches = [...rawText.matchAll(questionStartPattern)];

    if (matches.length === 0) {
        questions.push(rawText.trim());
        explanations.push('');
        return { questions, explanations };
    }

    for (let i = 0; i < matches.length; i++) {
        const currentMatch = matches[i];
        const startIndex = currentMatch.index;

        const endIndex = (i + 1 < matches.length) ? matches[i + 1].index : rawText.length;

        let block = rawText.substring(startIndex, endIndex).trim();
        if (!block) continue;

        let questionText = block;
        let explanationText = '';

        const loigiaiRegex = /\\begin\{loigiai\}([\s\S]*?)\\end\{loigiai\}/i;
        const matchExplanation = questionText.match(loigiaiRegex);

        if (matchExplanation && matchExplanation[1]) {
            explanationText = matchExplanation[1].trim();
            questionText = questionText.replace(loigiaiRegex, '').trim();
        }

        questions.push(questionText);
        explanations.push(explanationText);
    }
    
    return { questions, explanations };
}


// --- CÁC HÀM XÁC THỰC & QUẢN LÝ TÀI KHOẢN GIÁO VIÊN ---
exports.onTeacherSignIn = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { uid, email, name } = context.auth.token;
  const userRef = db.collection("users").doc(uid);
  const userDoc = await userRef.get();
  if (!userDoc.exists) {
    const trialEndDate = admin.firestore.Timestamp.fromMillis(Date.now() + 180 * 24 * 60 * 60 * 1000);
    await userRef.set({ email,Alias.length > 20 || !/^[a-z0-9]+$/.test(newAlias)) {
    throw new functions.https.HttpsError("invalid-argument", "Alias phải từ 3-20 ký tự, chỉ chứa chữ và số.");
  }
  const aliasCheck = await db.collection("users").where("teacherAlias", "==", newAlias).limit(1).get();
  if (!aliasCheck.empty && aliasCheck.docs[0].id !== uid) {
    throw new functions.https.HttpsError("already-exists", "Alias này đã có người dùng khác sử dụng.");
  }
  await db.collection("users").doc(uid).update({ teacherAlias: newAlias });
  return { success: true, message: "Cập nhật Alias thành công!" };
});

// --- CÁC HÀM QUẢN LÝ DỮ LIỆU (CRUD) ---
exports.getTeacherFullData = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { uid } = context.auth;
  const examsPromise = db.collection("exams").where("teacherId", "==", uid).get();
  const classesPromise = db.collection("classes").where("teacherId", "==", uid).get();
  const [examsSnapshot, classesSnapshot] = await Promise.all([examsPromise, classesPromise]);
  const exams name: name || email, role: "teacher", trialEndDate, createdAt: admin.firestore.FieldValue.serverTimestamp(), teacherAlias: null });
    return { trialEndDate: trialEndDate.toDate().toISOString(), teacherAlias: null };
  } else {
    const existingData = userDoc.data();
    if (existingData.trialEndDate && !(existingData.trialEndDate instanceof admin.firestore.Timestamp)) {
        existingData.trialEndDate = admin.firestore.Timestamp.fromDate(new Date(existingData.trialEndDate));
    }
    return existingData;
  }
});

exports.updateTeacherAlias = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { uid } = context.auth;
  const newAlias = String(data.alias).trim().toLowerCase();
  if (!newAlias || newAlias.length < 3 || newAlias.length > 20 || !/^[a-z0-9]+$/.test(newAlias)) {
    throw new functions.https.HttpsError("invalid-argument", "Alias phải từ 3-20 ký tự, chỉ chứa chữ và số.");
  }
  const aliasCheck = examsSnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  const classes = classesSnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  return { exams, classes };
});

// --- Quản lý Đề thi (ĐÃ NÂNG CẤP) ---
exports.addExam = functions.https.onCall(async (data, context) => {
    if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
    const { examData } = data;
    if (!examData) throw new functions.https.HttpsError("invalid-argument", "Thiếu dữ liệu đề thi.");
    
    const { questions, explanations } = parseExamContent(examData.content);
     = await db.collection("users").where("teacherAlias", "==", newAlias).limit(1).get();
  if (!aliasCheck.empty && aliasCheck.docs[0].id !== uid) {
    throw new functions.https.HttpsError("already-exists", "Alias này đã có người dùng khác sử dụng.");
  }
  await db.collection("users").doc(uid).update({ teacherAlias: newAlias });
  return { success: true, message: "Cập nhật Alias thành công!" };
});

// --- CÁC HÀM QUẢN LÝ DỮ LIỆU (CRUD) ---
exports.getTeacherFullData = functions
    if (questions.length === 0) {
        throw new functions.https.HttpsError("invalid-argument", "Không tìm thấy câu hỏi nào. Hãy chắc chắn bạn đã dùng định dạng 'Câu 1:', 'Bài 2:', v.v...");
    }

    const newExamData = {
        teacherId: context.auth.uid,
        examCode: String(examData.examCode).trim(),
        .https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { uid } = context.auth;
  const examsPromise = db.collection("exams").where("teacherId", "==", uid).get();
  const classesPromise = db.collection("classes").where("teacherId", "==",timeLimit: parseInt(examData.timeLimit, 10) || 90,
        keys: String(examData.keys || "").split("|").map(k => k.trim()),
        cores: String(examData.cores || "").split("|").map(c => c.trim()),
        questionTexts: questions,
        explanations: explanations,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
     uid).get();
  const [examsSnapshot, classesSnapshot] = await Promise.all([examsPromise, classesPromise]);
  const exams = examsSnapshot.docs.map((doc) => ({ id: doc.id,};
    await db.collection("exams").add(newExamData);
    return { success: true, message: `Đã thêm thành công ${questions.length} câu hỏi!` };
});

exports.updateExam = functions.https. ...doc.data() }));
  const classes = classesSnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  return { exams, classes };
});

// --- QuonCall(async (data, context) => {
    if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
    const { examId, examản lý Đề thi (ĐÃ NÂNG CẤP) ---
exports.addExam = functions.https.onCall(async (data, context) => {
    if (!context.auth) throw new functionsData } = data;
    if (!examId || !examData) throw new functions.https.HttpsError("invalid-argument", "Thiếu ID hoặc dữ liệu đề thi.");
    
    const examRef = db.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
    const { examData } = data;
    if (!examData) throw new functions.https.HttpsError("invalid-argument", "Thiếu dữ liệu đề thi.");
    
    const { questions, explanations } = parseExamContent(examData.content);
    
    if (questions.length === 0) {
        throw new functions..collection("exams").doc(examId);
    const doc = await examRef.get();
    if (!doc.exists || doc.data().teacherId !== context.auth.uid) {
        throw new functions.https.HttpsError("permission-denied", "Bạn không có quyền sửa đề thi này.");
    }

    const { questions, explanations } = parseExamContent(examData.content);

    if (questions.https.HttpsError("invalid-argument", "Không tìm thấy câu hỏi nào. Hãy chắc chắn bạn đã dùng định dạng 'Câu 1:', 'Bài 2:', v.v...");
    }

    const newExamData = {
        teacherId: context.auth.uid,
        examCode: String(examData.examCode).trim(),
        timeLimit: parseInt(examData.timeLimit, 10) || 9length === 0) {
        throw new functions.https.HttpsError("invalid-argument", "Không tìm thấy câu hỏi nào trong nội dung bạn cung cấp.");
    }

    const updatedExamData = {
        examCode: String(examData.examCode).trim(),
        timeLimit: parseInt(examData.timeLimit, 10) || 90,
        keys: String(examData.keys || "").split0,
        keys: String(examData.keys || "").split("|").map(k => k.trim()),
        cores: String(examData.cores || "").split("|").map(c => c.trim()),
        questionTexts: questions,
        explanations: explanations,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
    };
    await db.collection("exams").add(newExamData);
    ("|").map(k => k.trim()),
        cores: String(examData.cores || "").split("|").map(c => c.trim()),
        questionTexts: questions,
        explanations: explanations,
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
    };
    await examRef.update(updatedExamData);
    return { success: true, message: `Đã cập nhật thành công ${questionsreturn { success: true, message: `Đã thêm thành công ${questions.length} câu hỏi!` };
});

exports.updateExam = functions.https.onCall(async (data, context) => {
    if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
    const { examId, examData } = data;
    if (!examId || !.length} câu hỏi!` };
});

exports.deleteExam = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { examId } = data;
  if (!examId) throw new functions.https.HttpsError("invalid-argument", "Thiếu ID đề thi.");examData) throw new functions.https.HttpsError("invalid-argument", "Thiếu ID hoặc dữ liệu đề thi.");
    
    const examRef = db.collection("exams").doc(examId);
    const doc = await examRef.get();
    if (!doc.exists || doc.data().teacherId !== context.auth.uid) {
        throw new functions.https.HttpsError("permission-denied", "Bạn không có quyền sửa đề thi này.");
    }

    const { questions, explanations } = parseExamContent(examData.content);

    if (questions.length === 0) {
        throw new functions.https
  const examRef = db.collection("exams").doc(examId);
  const doc = await examRef.get();
  if (!doc.exists || doc.data().teacherId !== context.auth.uid) throw new functions.https.HttpsError("permission-denied", "Không có quyền xóa đề thi này.");
  await examRef.delete();
  return { success: true, message: "Đã xóa đề thi." };
});

exports.getTeacherFullExam = functions.https.onCall(async (data, context) => {
    if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần.HttpsError("invalid-argument", "Không tìm thấy câu hỏi nào trong nội dung bạn cung cấp.");
    }

    const updatedExamData = {
        examCode: String(examData.examCode).trim(),
        timeLimit: parseInt(examData.timeLimit, 10) || 90,
        keys: String(examData.keys || "").split("|").map(k => k.trim()),
        cores: String(examData.cores || "").split("|").map(c => c.trim()),
        questionTexts: questions,
        explanations: explanations,
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
     được xác thực.");
    const { examId } = data;
    if (!examId) throw new functions.https.HttpsError("invalid-argument", "Thiếu ID đề thi.");
    const doc = await db.collection("exams").doc(examId).get();
    if (!doc.exists || doc.data().teacherId !== context.auth.uid) throw new functions.https.HttpsError("permission-denied", "Không có quyền xem đề thi này.");
    return { id: doc.id, ...doc.data() };
});

// --- Quản lý Lớp học ---
exports.addClass = functions.https.onCall(};
    await examRef.update(updatedExamData);
    return { success: true, message: `Đã cập nhật thành công ${questions.length} câu hỏi!` };
});

exports.deleteExam = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { examId } = data;
  if (!examId) throw new functions.https.HttpsError("invalid-argument", "Thiếu ID đề thi.");
  const examRef = db.collection("exams").doc(examIdasync (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { classData } = data;
  if (!classData || !classData.name) throw new functions.https.HttpsError("invalid-argument", "Tên lớp không được trống.");
  await db.collection("classes").add({ teacherId: context.auth.uid, name: String(classData.name).trim(), students: Array.isArray(classData.students) ? classData.students.filter(s => s.trim() !== "") : [], createdAt: admin);
  const doc = await examRef.get();
  if (!doc.exists || doc.data().teacherId !== context.auth.uid) throw new functions.https.HttpsError("permission-denied", "Không có quyền xóa đề thi này.");
  await examRef.delete();
  return { success: true, message: "Đã xóa đề thi." };
});

exports.getTeacherFullExam = functions.https..firestore.FieldValue.serverTimestamp() });
  return { success: true, message: "Đã thêm lớp học thành công!" };
});

exports.updateClass = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { classId, classData } = data;
  onCall(async (data, context) => {
    if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
    const { examId } = data;
    if (!examId) throw new functions.https.HttpsError("invalid-argument", "Thiếu ID đề thi.");
    const doc = await db.collection("exams").doc(examId).get();if (!classId || !classData) throw new functions.https.HttpsError("invalid-argument", "Thiếu ID hoặc dữ liệu lớp học.");
  const classRef = db.collection("classes").doc(classId);
  const doc = await classRef.get();
  if (!doc.exists || doc.data().teacherId !== context.auth.uid) throw new functions.https.HttpsError("permission-denied", "Không có quyền sửa lớp học này.");
  await classRef.update({ name: String(classData.name).trim(), students: Array.isArray(classData.students) ? classData.students.filter(s =>
    if (!doc.exists || doc.data().teacherId !== context.auth.uid) throw new functions.https.HttpsError("permission-denied", "Không có quyền xem đề thi này.");
    return { id: doc.id, ...doc.data() };
});

// --- Quản lý Lớp học ---
exports.addClass = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { classData } = data;
  if (!classData || !classData.name) throw new functions.https.HttpsError("invalid-argument", "Tên lớp không được trống.");
  await db.collection("classes").add({ teacherId: context.auth.uid, name: String(classData. s.trim() !== "") : [] });
  return { success: true, message: "Đã cập nhật lớp học thành công!" };
});

exports.deleteClass = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { classId } = data;
  if (!classId) throw new functions.https.HttpsError("invalid-argument", "Thiếu ID lớp học.");
  const classRef = db.collection("classes").doc(classId);
  const doc = await classRef.get();
  if (!doc.exists || doc.data().teacherId !== context.auth.uid) throw new functions.https.HttpsError("permission-denied", "Không có quyền xóa lớp học này.");
name).trim(), students: Array.isArray(classData.students) ? classData.students.filter(s => s.trim() !== "") : [], createdAt: admin.firestore.FieldValue.serverTimestamp() });
  return { success: true, message: "Đã thêm lớp học thành công!" };
});

exports.updateClass = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { classId, classData } = data;
  if (!classId || !classData) throw new functions.https.HttpsError("invalid-argument", "Thiếu ID hoặc dữ liệu lớp học.");
  const classRef = db.collection("classes").doc(classId);
  const doc = await classRef.get();  await classRef.delete();
  return { success: true, message: "Đã xóa lớp học." };
});

exports.getTeacherFullClass = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { classId } = data;
  if (!classId) throw new functions.https.HttpsError("invalid-argument", "Thiếu ID lớp học.");
  const doc = await db.collection("classes").doc(classId).get();
  if (!doc.exists || doc.data().teacherId !== context.auth.uid) throw new functions.https.HttpsError("permission-denied", "Không có quyền xem lớp học này.");
  return { id: doc.id, ...doc.
  if (!doc.exists || doc.data().teacherId !== context.auth.uid) throw new functions.https.HttpsError("permission-denied", "Không có quyền sửa lớp học này.");
  await classRef.update({ name: String(classData.name).trim(), students: Array.isArray(classData.students) ? classData.students.filter(s => s.trim() !== "") : [] });
  return { success: true, message: "Đã cập nhật lớp học thành công!" };
});

exports.deleteClass = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { classId } = data;
  if (!classId) throw new functions.https.HttpsError("data() };
});

// --- CÁC HÀM DÀNH CHO HỌC SINH ---
exports.getClassesForStudent = functions.https.onCall(async (data, context) => {
  const teacherAlias = String(data.teacherAlias).trim().toLowerCase();
  if (!teacherAlias) throw new functions.https.HttpsError("invalid-argument", "Mã giáo viên là bắt buộc.");
  const teacherSnapshot = await db.collection("users").where("teacherAlias", "==", teacherAlias).limit(1).get();
  if (teacherSnapshot.empty) throw new functions.https.HttpsError("not-found", "Không tìm thấy giáo viên với Alias này.");
  const teacherDoc = teacherSnapshot.docs[0];
  const teacherData = teacherDoc.data();
  // Kiểm tra thời gian dùng thử (trialEndDate)
invalid-argument", "Thiếu ID lớp học.");
  const classRef = db.collection("classes").doc(classId);
  const doc = await classRef.get();
  if (!doc.exists || doc.data().teacherId !== context.auth.uid) throw new functions.https.HttpsError("permission-denied", "Không có quyền xóa lớp học này.");
  await classRef.delete();
  return { success: true, message: "Đã xóa lớp học." };
});

exports.getTeacherFullClass = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Yêu cầu cần được xác thực.");
  const { classId } = data;
  if (!classId) throw new functions.https.HttpsError("invalid-argument  // trialEndDate có thể là Timestamp hoặc Date string (nếu là legacy data)
  const trialEndDateMillis = teacherData.trialEndDate?.toMillis ? teacherData.trialEndDate.toMillis() : new Date(teacherData.trialEndDate).getTime();

  if (!teacherData.trialEndDate || trialEndDateMillis < Date.now()) {
    throw new functions.https.HttpsError("permission-denied", "Tài khoản của giáo viên này đã hết hạn dùng thử.");
  }

  const classesSnapshot = await db.collection("classes").where("teacherId", "==", teacherDoc.id).get();
  const classData = {};
  classesSnapshot.forEach((doc) => { classData[doc.data().name] = doc.data().students || []; });
  return classData;
});

exports.loadExamForStudent = functions.https.onCall", "Thiếu ID lớp học.");
  const doc = await db.collection("classes").doc(classId).get();
  if (!doc.exists || doc.data().teacherId !== context.auth.uid) throw new functions.https.HttpsError("permission-denied", "Không có quyền xem lớp học này.");
  return { id: doc.id, ...doc.data() };
});

// --- CÁC HÀM DÀNH CHO HỌC SINH ---
exports.getClassesForStudent = functions.https.onCall(async (data, context) => {
  const teacherAlias = String(data.teacherAlias).trim().toLowerCase();
  if (!teacherAlias) throw new functions.https.HttpsError("invalid-argument", "Mã giáo viên là bắt buộc.");
  const teacherSnapshot = await db.collection("users").where("(async (data, context) => {
  const { teacherAlias, examCode } = data;
  if (!teacherAlias || !examCode) throw new functions.https.HttpsError("invalid-argument", "Mã giáo viên và Mã đề là bắt buộc.");
  const teacherSnapshot = await db.collection("users").where("teacherAlias", "==", teacherAlias).limit(1).get();
  if (teacherSnapshot.empty) throw new functions.https.HttpsError("not-found", "Không tìm thấy giáo viên.");
  const teacherDoc = teacherSnapshot.docs[0];
  const teacherData = teacherDoc.data();

  const trialEndDateMillis = teacherData.trialEndDate?.toMillis ? teacherData.trialEndDate.toMillis() : new Date(teacherData.trialEndDate).getTime();
  if (!teacherData.trialEndDate || trialEndDateMillis < DateteacherAlias", "==", teacherAlias).limit(1).get();
  if (teacherSnapshot.empty) throw new functions.https.HttpsError("not-found", "Không tìm thấy giáo viên với Alias này.");
  const teacherDoc = teacherSnapshot.docs[0];
  const teacherData = teacherDoc.data();
  // Kiểm tra thời gian dùng thử (trialEndDate)
  const trialEndDateMillis = teacherData.trialEndDate?.toMillis ? teacherData.trialEndDate.toMillis() : new Date(teacherData.trialEndDate).getTime();

  if (!teacherData.trialEndDate || trialEndDateMillis < Date.now()) {
    throw new functions.https.HttpsError("permission-denied", "Tài khoản của giáo viên này đã hết hạn dùng thử.");
  }

  const classesSnapshot = await db.collection("classes").where("teacherId", "==", teacherDoc.now()) {
    throw new functions.https.HttpsError("permission-denied", "Tài khoản của giáo viên này đã hết hạn dùng thử.");
  }

  const examSnapshot = await db.collection("exams").where("teacherId", "==", teacherDoc.id).where("examCode", "==", examCode).limit(1).get();
  if (examSnapshot.empty) throw new functions.https.HttpsError("not-found", `Không tìm thấy đề thi ${examCode} của giáo viên này.`);
  const examData = examSnapshot.docs[0].data();
  const keysArray = Array.isArray(examData.keys.id).get();
  const classData = {};
  classesSnapshot.forEach((doc) => { classData[doc.data().name] = doc.data().students || []; });
  return classData;
});

exports.loadExamForStudent = functions.https.onCall(async (data, context) => {
  const { teacherAlias, examCode } = data;
  if (!teacherAlias || !examCode) throw new functions.https.HttpsError("invalid-argument", "Mã giáo viên và Mã đề là bắt buộc.");
  const teacherSnapshot = await db.collection("users").where("teacherAlias", "==", teacherAlias).) ? examData.keys : [];
  // Xác định loại câu hỏi dựa trên đáp án
  const questionTypes = keysArray.map(k => {
      if (typeof k !== 'string') return "Invalid"; // Handle non-string keys
      if (k.length === 1 && "ABCD".includes(k)) return "MC";
      if (/^[TF]+$/.test(k)) return "TF"; // 'T', 'F', 'TTF', etc.
      if (!isNaN(parseFloat(k))) return "Numeric"; // Numbers like '3.14', '10'
      return "Unknown"; // Fallback for unexpected key formats
  });
  const tfCounts = keysArray.map(k => (typeof k === 'string' && /^[TF]+$/.test(k)) ? k.length : 0);
  
  return {
    questionlimit(1).get();
  if (teacherSnapshot.empty) throw new functions.https.HttpsError("not-found", "Không tìm thấy giáo viên.");
  const teacherDoc = teacherSnapshot.docs[0];
  const teacherData = teacherDoc.data();

  const trialEndDateMillis = teacherData.trialEndDate?.toMillis ? teacherData.trialEndDate.toMillis() : new Date(teacherData.trialEndDate).getTime();
  if (!teacherData.trialEndDate || trialEndDateMillis < Date.now()) {
    throw new functions.https.HttpsError("permission-denied", "Tài khoản của giáo viên này đã hết hạn dùng thử.");
  }

  const examSnapshot = await db.collection("exams").where("teacherId", "==", teacherDoc.id).where("examCode", "==", examCode).limit(1).get();
  if (Texts: examData.questionTexts || [], 
    timeLimit: examData.timeLimit || 90,
    questionTypes: questionTypes,
    tfCounts: tfCounts,
  };
});

exports.submitExam = functions.https.onCall(async (data, context) => {
  const { teacherAlias, examCode, studentName, className, answers, isCheating } = data;
  if (!teacherAlias || !examCode || !studentName || !className) throw new functions.https.HttpsError("invalid-argument", "Thiếu thông tin định danh (học sinh, đề thi...).");
  if (!isCheating && !answers) throw new functions.https.HttpsError("invalid-argument", "Thiếu dữ liệu câu trả lời của bài làm.");

  const teacherSnapshot = await db.collection("users").where("teacherAlias", "examSnapshot.empty) throw new functions.https.HttpsError("not-found", `Không tìm thấy đề thi ${examCode} của giáo viên này.`);
  const examData = examSnapshot.docs[0].data();
  const keysArray = Array.isArray(examData.keys) ? examData.keys : [];
  
  // Logic nhận dạng loại câu hỏi (dựa vào format của key)
  const questionTypes = keysArray.map(k => {
      if (typeof k !== 'string') return "Invalid"; 
      if (k.length === 1 && "ABCD".includes(k)) return "MC"; // 'A', 'B', '==", teacherAlias).limit(1).get();
  if (teacherSnapshot.empty) throw new functions.https.HttpsError("not-found", "Không tìm thấy giáo viên.");
  const teacherDoc = teacherSnapshot.docs[0];

  // Logic xử lý khi phát hiện gian lận (isCheating === true)
  if (isCheating === true) {
    await db.collection("submissions").add({ teacherId: teacherDoc.id, timestamp: admin.firestore.FieldValue.serverTimestamp(), examCode, studentName, className, score: 0, isCheating: true });
    // Trả về cấu trúc examData rỗng nhưngC', 'D'
      if (/^[TF]+$/.test(k)) return "TF"; // 'T', 'F', 'TTF', etc.
      if (!isNaN(parseFloat(k)) && String(parseFloat(k)) === k.trim()) return "Numeric"; // Only accepts pure numbers/floats.
      return "Unknown"; // Fallback for unexpected key formats
  });
  const tfCounts = keysArray.map(k => ( hợp lệ để frontend không bị lỗi
    // Kèm theo examData từ server để frontend có thể hiển thị lời giải nếu muốn
    const examSnapshot = await db.collection("exams").where("teacherId", "==", teacherDoc.id).where("examCode", "==", examCode).limit(1).get();
    const examDataFromDb = examSnapshot.empty ? {} : examSnapshot.docs[0].data();
    return { 
        score: 0, 
        examData: { 
            questionTexts: examDataFromDb.questionTexts || [], 
            explanations: examDataFromDb.explanations || [],
typeof k === 'string' && /^[TF]+$/.test(k)) ? k.length : 0);
  
  return {
    questionTexts: examData.questionTexts || [], 
    timeLimit: examData.timeLimit || 90,
    questionTypes: questionTypes, // Trả về loại câu hỏi để frontend biết cách render
    tfCounts: tfCounts, // Trả về số câu con cho TF
              keysStr: examDataFromDb.keys || [],
            coreStr: examDataFromDb.cores || []
        }, 
        detailedResults: {} 
    };
  }

  const examSnapshot = await db.collection("exams").where("teacherId", "==", teacherDoc.id).where("examCode", "==", examCode).limit(1).get();
  if (examSnapshot.empty) throw new functions.https.HttpsError("not-found", `Không tìm thấy đề thi ${examCode} để chấm điểm.`);

  const examData = examSnapshot.docs[0].data();
  const { keys, cores, questionTexts};
});

exports.submitExam = functions.https.onCall(async (data, context) => {
  const { teacherAlias, examCode, studentName, className, answers, isCheating } = data;
  if (!teacherAlias || !examCode || !studentName || !className) throw new functions.https.HttpsError("invalid-argument", "Thiếu thông tin định danh (học sinh, đề thi...).");
  if (!isCheating && !answers) throw new functions.https.HttpsError("invalid-argument", "Thiếu dữ liệu câu trả lời của bài làm.");

  const teacherSnapshot = await db.collection("users").where, explanations } = examData;
  
  // Đảm bảo keys và cores là mảng và có độ dài hợp lệ
  if (!Array.isArray(keys) || !Array.isArray(cores) || keys.length !== questionTexts.length) {
      throw new functions.https.HttpsError("internal", "Dữ liệu đề thi bị lỗi: Keys hoặc Cores không hợp lệ.");
  }

  // Xác định lại questionTypes để đảm bảo đồng bộ với keys
  const questionTypes = keys.map(k => {
      if (typeof k !== 'string') return "Invalid";
      if (k.length === 1 && "ABCD("teacherAlias", "==", teacherAlias).limit(1).get();
  if (teacherSnapshot.empty) throw new functions.https.HttpsError("not-found", "Không tìm thấy giáo viên.");
  const teacherDoc = teacherSnapshot.docs[0];

  if (isCheating === true) {
    await db.collection("submissions").add({ teacherId: teacherDoc.id, timestamp: admin.firestore.FieldValue.server".includes(k)) return "MC";
      if (/^[TF]+$/.test(k)) return "TF";
      if (!isNaN(parseFloat(k))) return "Numeric";
      return "Unknown";
  });
  
  let totalScore = 0;
  const detailedResults = {};

  keys.forEach((key, i) => {
    let questionScore = 0;
    const type = questionTypes[iTimestamp(), examCode, studentName, className, score: 0, isCheating: true });
    // Nếu gian lận, vẫn cần trả về đủ examData để frontend hiển thị lời giải nếu có
    const examSnapshot = await db.collection("exams").where("teacherId", "==", teacherDoc.id).where("examCode", "==", examCode).limit(1).get();
    const examDataFromDb = examSnapshot.empty ? {} : examSnapshot.docs[0].data();
    return { 
        score: 0, 
        examData: { 
            questionTexts: examDataFromDb.questionTexts || [], 
            ex];
    // Lấy giá trị điểm mặc định cho câu hỏi (nếu có), an toàn hơn với NaN
    const coreValue = parseFloat(cores[i]) || 0; 
    
    // --- Logic Chấm điểm ---
    if (type === "MC") {
        const userAnswer = answers[`q${i}`];
        if (userAnswer === key) questionScore = coreValue;
        detailedResults[`q${planations: examDataFromDb.explanations || [],
            keysStr: examDataFromDb.keys || [],
            coreStr: examDataFromDb.cores || []
        }, 
        detailedResults: {} 
    };
  }

  const examSnapshot = await db.collection("exams").where("teacherId", "==", teacherDoc.id).where("examCode", "==", examCode).limit(1).geti}`] = { userAnswer: userAnswer || "", correctAnswer: key, scoreEarned: questionScore, type };
    } else if (type === "TF") {
        let countCorrect = 0;
        const userSubAnswers = [];
        // Tách chuỗi điểm thành mảng số thực, lọc bỏ các giá trị không phải số hợp lệ
        // Ví dụ: cores[i] = "0.1,0.25();
  if (examSnapshot.empty) throw new functions.https.HttpsError("not-found", `Không tìm thấy đề thi ${examCode} để chấm điểm.`);

  const examData = examSnapshot.docs[0].data();
  const { keys, cores, questionTexts, explanations } = examData;
  
  if (!Array.isArray(keys) || !Array.isArray(cores) || keys.length !== questionTexts,0.5,1" cho 4 ý nhỏ
        const tfCoreValues = (cores[i] || "").split(",").map(x => parseFloat(x)).filter(n => !isNaN(n)); 
        
        for (let j = 0; j < key.length; j++) {
            const subAnswer = answers[`q${i}_sub${j}`];
            userSubAnswers.push(subAnswer);
            if (subAnswer === key[j]) {
                countCorrect++;
            }
        }
        
        // Tính điểm cho câu Đúng/Sai: Lấy điểm tương ứng với số câu con đúng.
        // Đảm bảo.length) {
      throw new functions.https.HttpsError("internal", "Dữ liệu đề thi bị lỗi: Keys hoặc Cores không hợp lệ.");
  }

  const questionTypes = keys.map(k => {
      if (typeof k !== 'string') return "Invalid";
      if (k.length === 1 && "ABCD".includes(k)) return "MC";
      if (/^[TF]+$/.test(k)) return "TF";
      if (!isNaN(parseFloat(k)) && String(parseFloat(k)) === k.trim()) return "Numeric";
      return "Unknown";
  });
  
  let totalScore = 0;
 rằng cores[i] của bạn định nghĩa đủ các mốc điểm cho số ý con đúng.
        // Ví dụ, nếu có 4 ý nhỏ, cores[i] nên có 4 giá trị: "0.1,0.25,0.5,1"
        if (countCorrect > 0 && countCorrect <= tfCoreValues.length) {
            questionScore = tfCoreValues[countCorrect - 1]; 
          const detailedResults = {};

  keys.forEach((key, i) => {
    let questionScore = 0;
    const type = questionTypes[i];
    const coreValue = parseFloat(cores[i]) || 0; 
    
    // --- Logic Chấm điểm cho từng loại câu hỏi ---
    if (type === "MC") {
        const userAnswer = answers[`q${i}`];
        if (userAnswer === key)} else if (countCorrect > tfCoreValues.length && tfCoreValues.length > 0) {
            // Trường hợp có nhiều câu con đúng hơn số điểm định nghĩa, lấy điểm tối đa
            questionScore = tfCoreValues[tfCoreValues.length - 1];
        } else {
            questionScore = 0; // Mặc định 0 điểm nếu không có câu con nào đúng hoặc không định nghĩa điểm
        } questionScore = coreValue;
        detailedResults[`q${i}`] = { userAnswer: userAnswer || "", correctAnswer: key, scoreEarned: questionScore, type };
    } else if (type === "TF") {
        let countCorrect = 0;
        const userSubAnswers = [];
        const tfCoreValues = (cores[i] || "").split(",").map(x => parseFloat(x)).filter(n => !isNaN(n

        detailedResults[`q${i}`] = { userAnswer: userSubAnswers, correctAnswer: key, scoreEarned: questionScore, type };
    } else if (type === "Numeric") {
        const userAnswer = answers[`q${i}`];
        // Đảm bảo userAnswer là một số hợp lệ trước khi so sánh, dùng tolerance cho số thực
        const parsedUserAnswer = parseFloat(userAnswer);
        const parsedCorrectAnswer =)); 
        
        for (let j = 0; j < key.length; j++) {
            const subAnswer = answers[`q${i}_sub${j}`];
            userSubAnswers.push(subAnswer);
            if (subAnswer === key[j]) {
                countCorrect++;
            }
        }
        
        // Tính điểm cho câu Đúng/Sai dựa vào số câu con đúng và mảng điểm tf parseFloat(key);

        if (!isNaN(parsedUserAnswer) && !isNaN(parsedCorrectAnswer) && Math.abs(parsedUserAnswer - parsedCorrectAnswer) < 1e-9) {
            questionScore = coreValue;
        }
        detailedResults[`q${i}`] = { userAnswer: userAnswer || "", correctAnswer: key, scoreEarned: questionScore, type };
    }
    totalScore += questionScore;
  });

  // Lưu bài nộp vào Firestore.
  await db.collection("submissions").add({ 
      teacherId: teacherDoc.id, 
      timestamp: admin.firestore.FieldValue.serverTimestamp(),CoreValues
        if (countCorrect > 0 && countCorrect <= tfCoreValues.length) {
            questionScore = tfCoreValues[countCorrect - 1]; 
        } else if (countCorrect > tfCoreValues.length && tfCoreValues.length > 0) {
            questionScore = tfCoreValues[tfCoreValues.length - 1]; // Lấy điểm tối đa nếu nhiều hơn số điểm định nghĩa
        } else {
            questionScore = 0; 
        }

        detailedResults[`q${i}`] = { userAnswer: userSubAnswers, correctAnswer: key, scoreEarned: questionScore, type };
    } else if (type === "Numeric 
      examCode, 
      studentName, 
      className, 
      answers: answers, 
      score: parseFloat(totalScore.toFixed(2)), 
      isCheating: false 
  });

  return {
    score: parseFloat(totalScore.toFixed(2)),
    examData: { // Trả lại đầy đủ dữ liệu đề thi để hiển thị chi tiết sau chấm điểm
      keysStr:") {
        const userAnswer = answers[`q${i}`];
        const parsedUserAnswer = parseFloat(userAnswer);
        const parsedCorrectAnswer = parseFloat(key);

        if (!isNaN(parsedUserAnswer) && !isNaN(parsedCorrectAnswer) && Math.abs(parsedUserAnswer - parsedCorrectAnswer) < 1e-9) {
            questionScore = coreValue;
        }
        detailedResults[`q${i}`] = { userAnswer: keys,
      coreStr: cores,
      questionTexts: questionTexts || [],
      explanations: explanations || [],
      timeLimit: examData.timeLimit,
    },
    detailedResults: detailedResults,
  };
});
```

---

### Bước 2: Cập nhật `main.js` (Frontend logic)

Tôi sẽ thêm logic xử lý placeholder cho hình ảnh trong `main.js` để khi ` userAnswer || "", correctAnswer: key, scoreEarned: questionScore, type };
    } else { // Handle 'Unknown' or 'Invalid' types
        detailedResults[`q${i}`] = { userAnswer: answers[`q${i}`] || "", correctAnswer: key, scoreEarned: 0, type: type };
    }
    totalScore += questionScore;
  });

  await db.collection("submissions").add({ 
      teacherId: teacherDoc.questionText` hoặc `explanationText` có chứa các chuỗi `sangnhc1`, `sangnhc2`,... nó sẽ tự động thay thế bằng URL hình ảnh thực tế. Điều này đảm bảo hình ảnh hiển thị đúng.id, 
      timestamp: admin.firestore.FieldValue.serverTimestamp(), 
      examCode, 
      studentName, 
      className, 
      answers: answers, 
      score: parseFloat(totalScore.toFixed(2)), 
      isCheating: false 
  });

  return {
    score: parseFloat(totalScore.toFixed(2)),
    examData: { 
      keysStr: keys,
      

```javascript
// public/js/main.js (Phiên bản 100% Hoàn Chỉnh - Sửa lỗi tuyệt đối)

// --- KHỞI TẠO FIREBASE AN TOÀN ---
// KIỂM TRA TRƯỚC KHI KHỞI TẠO ĐỂ TRÁNH LỖI 'duplicate-app'
if (!firebase.apps.length) {
    const firebaseConfig = {
        apiKey:coreStr: cores,
      questionTexts: questionTexts || [],
      explanations: explanations || [],
      timeLimit: examData.timeLimit,
    },
    detailedResults: detailedResults,
  }; "AIzaSyCaybcU4Er3FM3C7mh_rCun7tLXx3uCfa8",
        authDomain: "sangnhc.firebaseapp.com",
        projectId: "sangnhc",
        storageBucket: "sangnhc.appspot.com",
        messagingSenderId: "1066567815353",
        appId: "1
});
```

---

### Bước 2: Cập nhật `public/js/main.js`

Tôi sẽ thêm hàm `processImagePlaceholders` vào `main.js` và gọi nó khi `loadQuiz` và `gradeQuiz` hiển thị nội dung câu hỏi/lời giải.

```javascript
// public/js/main.js (Phiên bản 100% Hoàn Chỉnh - Đã xử lý hình ảnh và hiển thị kết quả)

//:1066567815353:web:ae68c784b9e964a6778b68"
    };
    firebase.initializeApp(firebaseConfig);
}
// Giờ đây, chúng ta chắc chắn rằng Firebase đã được khởi tạo đúng một lần.
const auth = firebase.auth();
const db = firebase.firestore();
const functions = firebase.functions(); --- KHỞI TẠO FIREBASE AN TOÀN ---
if (!firebase.apps.length) {
    const firebaseConfig = {
        apiKey: "AIzaSyCaybcU4Er3FM3C7mh_rCun7tLXx3uCfa8",
        authDomain: "sangnhc.firebaseapp.com",
        projectId: "sangnhc",
        storageBucket: "sangnh

// --- BIẾN TOÀN CỤC & HÀM TIỆN ÍCH ---
let examData = null, timerInterval = null, classData = {}, currentTeacherId = null;
const getEl = (c.appspot.com",
        messagingSenderId: "1066567815353",
        appId: "1:1066567815353:web:ae68c784b9e964a6778b68"
    };
    firebase.initializeApp(firebaseConfig);
}
const auth = firebase.auth();id) => document.getElementById(id);

// --- HÀM XỬ LÝ PLACEHOLDER HÌNH ẢNH ---
function processImagePlaceholders(text) {
    if (!text || typeof text !== 'string') return text;
    text = text.replace(/sangnhc1/g, 'https://gitlab.com/nguyensangnhc/pic4web/-/raw/main/Hinh');
    text = text.replace
const db = firebase.firestore();
const functions = firebase.functions();

// --- BIẾN TOÀN CỤC & HÀM TIỆN ÍCH ---
let examData = null, timerInterval = null, classData = {}, currentTeacherId = null;
const getEl = (id) => document.getElementById(id);

// --- XỬ LÝ PLACEHOLDER HÌNH ẢNH ---
function processImagePlaceholders(/sangnhc2/g, 'https://gitlab.com/nguyensangnhc/tikz4web/-/raw/main/Hinh');
    text = text.replace(/sangnhc3/g, 'https://gitlab.com/nguyensangnhc/tikz2png/-/raw/main/Hinh');
    text = text.replace(/sangnhc4/g, 'https://gitlab.com/ng(text) {
    if (!text) return '';
    let processedText = text;
    // Replace custom placeholders with actual image URLs
    processedText = processedText.replace(/sangnhc1/g, 'https://gitlab.com/nguyensangnhc/pic4web/-/raw/main/Hinh');
    processedText = processedText.replace(/sangnhc2/g, 'https://gitlab.com/nguyensangnhc/png2link/-/raw/main/Hinh');
    return text;
}

// --- HÀM RENDER KATEX ---
function renderKatexInElement(element) {
    if (window.renderMathInElement) {
        try {
            window.renderMathInElement(element, {
                delimiters: [
                    {left: '$$', right: '$$', display: true},
                    {left: '$', right: '$', display: false},
                    {left: '\\(', right: '\\)', display: false},
                    {left: '\\[', right: '\\]', display: true}uyensangnhc/tikz4web/-/raw/main/Hinh');
    processedText = processedText.replace(/sangnhc3/g, 'https://gitlab.com/nguyensangnhc/tikz2png/-/raw/main/Hinh');
    processedText = processedText.replace(/sangnhc4/g, 'https://gitlab.com/nguyensangnhc/png2link/-/raw/main/Hinh');
    return processedText;
}

// --- HÀM RENDER KATEX ---
function renderKatexInElement(element) {
    if (window.renderMathInElement) {

                ],
                throwOnError: false
            });
        } catch (error) { console.error("KaTeX rendering error:", error); }
    }
}

// --- QUẢN LÝ GIAO DIỆN (UI) ---
function showScreen(screenId) {
    const screens = ["loginScreen", "teacherLogin", "loading", "timer-container", "quiz", "gradeBtn", "result-container", "teacherDashboard"];
    screens.forEach(id => {
        const el = getEl(id);
        if (el) el.style.display = "none";
    });
    const elToShow =        try {
            window.renderMathInElement(element, {
                delimiters: [
                    {left: '$$', right: '$$', display: true},
                    {left: '$', right: '$', display: false},
                    {left: '\\(', right: '\\)', display: false},
                    {left: '\\[', right: '\\]', display: true}
                ],
                throwOnError: false
            });
        } catch (error) { console.error("KaTeX rendering error:", error); }
    }
}

// --- QUẢN LÝ GIAO DIỆN (UI) ---
function showScreen(screenId) {
     getEl(screenId);
    if (elToShow) {
        // Sử dụng style.display phù hợp cho từng loại màn hình
        if (["quiz", "teacherDashboard"].includes(screenId)) {
            elToShow.style.display = "block";
        } else if (["loading"].includes(screenId)) {
            elToShow.style.display = "flex"; // Loading overlay
        } else if (["timer-container"].includes(screenId)) {
            elToShow.style.display = "block"; // Timer is sticky block
        }
        else { // loginScreen, teacherLogin, result-container
            elToShow.style.display = "flex";
        }
const screens = ["loginScreen", "teacherLogin", "loading", "timer-container", "quiz", "gradeBtn", "result-container", "teacherDashboard"];
    screens.forEach(id => {
        const el = getEl(id);
        if (el) el.style.display = "none";
    });
    const elToShow = getEl(screenId);
    if (elToShow) {
        // Use 'flex' for default, but 'block' for dashboard/quiz as they need more complex layout
        elToShow.style.display = screenId.includes("Dashboard") || screenId.includes("quiz") ? "block" : "flex";
    }
}
const showLoading = () => getEl("loading").style.display = "flex";
const hideLoading = () => getEl("loading").style.display = "none";
const showStudentLoginScreen    }
}
const showLoading = () => getEl("loading").style.display = "flex";
const hideLoading = () => getEl("loading").style.display = "none";
const showStudentLoginScreen = () => showScreen("loginScreen");
const showTeacherLoginScreen = () => showScreen("teacherLogin");

// --- XÁC THỰC & QUẢN LÝ GIÁO VIÊN ---
auth.onAuthStateChanged(user => {
    if (user) {
        currentTeacherId = user.uid;
        showTeacherLoginScreen();
        updateTeacherUI(user);
    } else {
        currentTeacherId = null;
        getEl("teacherInfo").style.display = "none";
        getEl("teacherActions").style.display = "none";
        showStudentLoginScreen();
    }
});

async function updateTeacherUI = () => showScreen("loginScreen");
const showTeacherLoginScreen = () => showScreen("teacherLogin");

// --- XÁC THỰC & QUẢN LÝ GIÁO VIÊN ---
auth.onAuthStateChanged(user => {
    if (user) {
        currentTeacherId = user.uid;
        showTeacherLoginScreen();
        updateTeacherUI(user);
    } else {
        currentTeacherId = null;
        getEl("teacherInfo").style.display = "none";
        getEl("teacherActions").style.display = "none";
        showStudentLoginScreen();
    }
});

async function updateTeacherUI(user) {
    showLoading();
    try {
        const res = await functions.httpsCallable("onTeacherSignIn")();
        const data = res.data;
        const trialDate =(user) {
    showLoading();
    try {
        const res = await functions.httpsCallable("onTeacherSignIn")();
        const data = res.data;
        const trialDate = data.trialEndDate?.seconds ? new Date(data.trialEndDate.seconds * 1000) : new Date(data.trialEndDate);
        const trialDays = Math.max(0, Math.ceil((trialDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)));
        const userInfoHtml = `
            <p><strong>Tên:</strong> ${user.displayName || user.email}</p>
            <p><strong>Alias:</strong> <span id="currentAliasDisplay">${data.teacherAlias || "Chưa có"}</span></p>
            <p><strong>Trạng thái:</strong> ${trialDays > 0 ? `Còn ${trialDays} ngày dùng thử` : "Đã hết hạn"}</p>`;
        
        getEl("teacherInfo").innerHTML = userInfoHtml;
        getEl("teacherInfo data.trialEndDate?.seconds ? new Date(data.trialEndDate.seconds * 1000) : new Date(data.trialEndDate);
        const trialDays = Math.max(0, Math.ceil((trialDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)));
        const userInfoHtml = `
            <p><strong>Tên:</strong> ${user.displayName || user.email}</p>
            <p><strong>Alias:</strong> <span id="currentAliasDisplay">${data.teacherAlias || "Chưa có"}</span></p>
            <p><strong>Trạng thái:</strong> ${trialDays > 0 ? `Còn ${trialDays} ngày dùng thử` : "Đã hết hạn"}</p>`;
        
        getEl("teacherInfo").innerHTML = userInfoHtml;
        getEl("teacherInfo").style.display = "block";
        getEl("teacherActions").style.display = "flex";
        getEl("teacherAliasInput").value = data.teacherAlias || "";
        const teacherDashboardNameEl = getEl("teacherDashboardName");
        if (teacherDashboardNameEl) {
            teacherDashboardNameEl.textContent = user.displayName || user.email;
        }
        const trialRemainingDaysEl").style.display = "block";
        getEl("teacherActions").style.display = "flex";
        getEl("teacherAliasInput").value = data.teacherAlias || "";
        const teacherDashboardNameEl = getEl("teacherDashboardName");
        if (teacherDashboardNameEl) {
            teacherDashboardNameEl.textContent = user.displayName || user.email;
        }
        const trialRemainingDaysEl = getEl("trialRemainingDays");
        if (trialRemainingDaysEl) {
            trialRemainingDaysEl.textContent = trialDays;
        }

    } catch (error) {
        Swal.fire("Lỗi", `Lỗi xử lý đăng nhập: ${error.message || "Không thể lấy thông tin người dùng."}`, "error");
        auth.signOut();
    } finally {
        hideLoading();
    }
}

function signInWithGoogle() {
    auth.signInWithPopup(new firebase.auth.GoogleAuthProvider()).catch(error => Swal.fire("Lỗi", "Lỗi đăng nhập Google: " + error.message, "error"));
}

function signOut() {
    auth.signOut().then(() => Swal.fire("Thông báo", "Đăng xuất thành công!", "success"));
}

function updateTeacherAlias() {
    if (!currentTeacher = getEl("trialRemainingDays");
        if (trialRemainingDaysEl) {
            trialRemainingDaysEl.textContent = trialDays;
        }

    } catch (error) {
        Swal.fire("Lỗi", `Lỗi xử lý đăng nhập: ${error.message || "Không thể lấy thông tin người dùng."}`, "error");
        auth.signOut();
    } finally {
        hideLoading();
    }
}

function signInWithGoogle() {
    auth.signInWithPopup(new firebase.auth.GoogleAuthProvider()).catch(error => Swal.fire("Lỗi", "Lỗi đăng nhập Google: " + error.message, "error"));
}

function signOut() {
    auth.signOut().then(() => Swal.fire("Thông báo", "Đăng xuất thành công!", "success"));
}

function updateTeacherAlias() {
    if (!currentTeacherId) return;
    const alias = getEl("teacherAliasInput").value.trim();
    if (!alias) { Swal.fire("Cảnh báo", "Alias không được trống.", "warning"); return; }
    showLoading();
    functions.httpsCallable("updateTeacherAlias")({ alias })
        .then(res => {
            Swal.fire("Thành công", res.data.message, "success");
            const currentAliasDisplayEl = getEl("currentAliasDisplay");
            if (currentAliasDisplayEl) {
                currentAliasDisplayEl.textContent = alias;
            }
        })
        .catch(error => Swal.Id) return;
    const alias = getEl("teacherAliasInput").value.trim();
    if (!alias) { Swal.fire("Cảnh báo", "Alias không được trống.", "warning"); return; }
    showLoading();
    functions.httpsCallable("updateTeacherAlias")({ alias })
        .then(res => {
            Swal.fire("Thành công", res.data.message, "success");
            const currentAliasDisplayEl = getEl("currentAliasDisplay");
            if (currentAliasDisplayEl) {
                currentAliasDisplayEl.textContent = alias;
            }
        })
        .catch(error => Swal.fire("Lỗi", `Lỗi cập nhật Alias: ${error.message}`, "error"))
        .finally(hideLoading);
}

// --- DASHBOARD GIÁO VIÊN ---
function showTeacherDashboard() {
    if (!currentTeacherId) return;
    showScreen("teacherDashboard");
    loadTeacherDataForDashboard();
    loadSubmissions();
}

const hideTeacherDashboard = () => showTeacherLoginScreen();

async function loadTeacherDataForDashboard() {
    const examList = getEl("exam-list"), classList = getEl("class-list");
    examList.innerHTML = `<div class="list-item">Đang tải...</div>`;
    classList.innerHTML = `<div class="list-item">Đang tải...</div>`;
    try {
        const result = await functions.httpsCallable("getTeacherFullData")();
        renderExamsList(result.data.exams);
        renderClassesList(result.data.classes);
    } catch (error) {
        handleLoadError(error, examList, classList);
    fire("Lỗi", `Lỗi cập nhật Alias: ${error.message}`, "error"))
        .finally(hideLoading);
}

// --- DASHBOARD GIÁO VIÊN ---
function showTeacherDashboard() {
    if (!currentTeacherId) return;
    showScreen("teacherDashboard");
    loadTeacherDataForDashboard();
    loadSubmissions();
}

const hideTeacherDashboard = () => showTeacherLoginScreen();

async function loadTeacherDataForDashboard() {
    const examList = getEl("exam-list"), classList = getEl("class-list");
    examList.innerHTML = `<div class="list-item">Đang tải...</div>`;
    classList.innerHTML = `<div class="list-item">Đang tải...</div>`;
    try {
        const result = await functions.httpsCallable("getTeacherFullData")();
        renderExamsList(result.data.exams);
        renderClassesList(result.data.classes);
    } catch (error) {
        handleLoadError(error, examList, classList);
    }
}

function renderExamsList(exams) {
    const container = getEl("exam-list");
    container.innerHTML = "";
    if (!exams || exams.length === 0) {
        container.innerHTML = `<div class="list-item"><div class="list-item-content">Chưa có đề thi nào.</div></div>`;
        return;
    }
    exams.sort((a, b) => (a.examCode > b.examCode) ? 1 : -1).forEach(exam => {
        const item = document.createElement("div");
        item.className = "list-item";
        item.innerHTML = `
            <div class="list-item-content">
                <div class="list-item-title">${exam.examCode}</div>
                <div class="list-item-details">${exam.questionTexts}
}

function renderExamsList(exams) {
    const container = getEl("exam-list");
    container.innerHTML = "";
    if (!exams || exams.length === 0) {
        container.innerHTML = `<div class="list-item"><div class="list-item-content">Chưa có đề thi nào.</div></div>`;
        return;
    }
    exams.sort((a, b) => (a.examCode > b.examCode) ? 1 : -1).forEach(exam => {
        const item = document.createElement("div");
        item.className = "list-item";
        item.innerHTML = `
            <div class="list-item-content">
                <div class="list-item-title">${exam.examCode}</div>
                <div class="list-item-details">${exam.questionTexts?.length || 0} câu - ${exam.timeLimit || 90} phút</div>
            </div>
            <div class="list-item-actions">
                <button class="edit-btn" onclick="editExam('${exam.id}')" title="Sửa"><i class="fas fa-edit"></i></button>
                <button onclick="deleteExam('${exam.id}', '${exam.examCode}')" title="Xóa"><i class="fas fa-trash-alt"></i></button>
            </div>`;
        container.appendChild(item);
    });
}

function renderClassesList(classes) {
    const container = getEl("class-list");
    container.innerHTML = "";
    if (!classes || classes.length === 0) {
        container.innerHTML = `<div class="list-item"><div class="list-item-content">Chưa có lớp học nào.</div></div>`;
        return;
    }
    classes.sort((a, b) => (a.name > b.name) ? 1 : -1).forEach(cls => {
        const item = document.createElement("div");
        item.className = "list-item";
        item.innerHTML = `
            <div class="list-item-content">
                <div class="list-item-title">${cls.name}</div>
                <div class="list-item-details">${cls.students?.length || 0} học sinh</div>
            </div>
            <div class="?.length || 0} câu - ${exam.timeLimit || 90} phút</div>
            </div>
            <div class="list-item-actions">
                <button class="edit-btn" onclick="editExam('${exam.id}')" title="Sửa"><i class="fas fa-edit"></i></button>
                <button onclick="deleteExam('${exam.id}', '${exam.examCode}')" title="Xóa"><i class="fas fa-trash-alt"></i></button>
            </div>`;
        container.appendChild(item);
    });
}

function renderClassesList(classes) {
    const container = getEl("class-list");
    container.innerHTML = "";
    if (!classes || classes.length === 0) {
        container.innerHTML = `<div class="list-item"><div class="list-item-content">Chưa có lớp học nào.</div></div>`;
        return;
    }
    classes.sort((a, b) => (a.name > b.name) ? 1 : -1).forEach(cls => {
        const item = document.createElement("div");
        item.className = "list-item";
        item.innerHTML = `
            <div class="list-item-content">
                <div class="list-item-title">${cls.name}</div>
                <div class="list-item-details">${cls.students?.length || 0} học sinh</div>
            </div>
            <div class="list-item-actions">
                <button class="edit-btn" onclick="editClass('${cls.id}')" title="Sửa"><i class="fas fa-edit"></i></button>
                <button onclick="deleteClass('${cls.id}', '${cls.name}')" title="Xóa"><i class="fas fa-trash-alt"></i></button>
            </div>`;
        container.appendChild(item);
    });
}

async function loadSubmissions() {
    const container = getEl("submission-list");
    container.innerHTML = `<div class="list-item">Đang tải...</div>`;
    try {
        const snapshot = await db.collection("submissions").where("teacherId", "==", currentTeacherId).orderBy("timestamp", "desc").limit(20).get();
        container.innerHTML = "";
        if (snapshot.empty) {
            container.innerHTML = `<div class="list-item">Chưa có bài nộp nào.</div>`;
            return;
        }
        snapshot.forEach(doc => {
            const data = doc.datalist-item-actions">
                <button class="edit-btn" onclick="editClass('${cls.id}')" title="Sửa"><i class="fas fa-edit"></i></button>
                <button onclick="deleteClass('${cls.id}', '${cls.name}')" title="Xóa"><i class="fas fa-trash-alt"></i></button>
            </div>`;
        container.appendChild(item);
    });
}

async function loadSubmissions() {
    const container = getEl("submission-list");
    container.innerHTML = `<div class="list-item">Đang tải...</div>`;
    try {
        const snapshot = await db.collection("submissions").where("teacherId", "==", currentTeacherId).orderBy("timestamp", "desc").limit(20).get();
        container.innerHTML = "";
        if (snapshot.empty) {
            container.innerHTML = `<div class="list-item">Chưa có bài nộp nào.</div>`;
            return;
        }
        snapshot.forEach(doc => {
            const data = doc.data();
            const item = document.createElement("div");
            item.className = "list-item";
            item.innerHTML = `
                <div class="list-item-content">
                    <div class="list-item-title">${data.studentName} - Lớp ${data.className}</div>
                    <div class="list-item-details">${data.examCode} - ${data.score.toFixed(2)} điểm - ${data.timestamp.toDate().toLocaleString('vi-VN')}</div>
                </div>`;
            container.appendChild(item);
        });
    } catch (error) {
        handleLoadError(error, container);
    }
}

function handleLoadError(error, ...elements) {
    Swal.fire("Lỗi", `Lỗi tải dữ liệu: ${error.message}`, "error");
    elements.forEach(el => {
        if (el) el.innerHTML = `<div class="list-item">Lỗi tải dữ liệu.</div>`;
    });
}

// --- QUẢN LÝ FORM (MODAL) ---
function showExamForm(exam = null) {
    const isEdit = !!exam;
    getEl("examFormTitle").textContent = isEdit ? `Sửa Đề thi: ${exam.examCode}` : "Thêm Đề thi mới";
    getEl("examId").value = isEdit ? exam.id : "";
    getEl("examFormCode").value = isEdit ? exam.examCode : "";
    getEl();
            const item = document.createElement("div");
            item.className = "list-item";
            item.innerHTML = `
                <div class="list-item-content">
                    <div class="list-item-title">${data.studentName} - Lớp ${data.className}</div>
                    <div class="list-item-details">${data.examCode} - ${data.score.toFixed(2)} điểm - ${data.timestamp.toDate().toLocaleString('vi-VN')}</div>
                </div>`;
            container.appendChild(item);
        });
    } catch (error) {
        handleLoadError(error, container);
    }
}

function handleLoadError(error, ...elements) {
    Swal.fire("Lỗi", `Lỗi tải dữ liệu: ${error.message}`, "error");
    elements.forEach(el => {
        if (el) el.innerHTML = `<div class="list-item">Lỗi tải dữ liệu.</div>`;
    });
}

// --- QUẢN LÝ FORM (MODAL) ---
function showExamForm(exam = null) {
    const isEdit = !!exam;
    getEl("examFormTitle").textContent = isEdit ? `Sửa Đề thi: ${exam.examCode}` : "Thêm Đề thi mới";
    getEl("examId").value = isEdit ? exam.id : "";
    getEl("examFormCode").value = isEdit ? exam.examCode : "";
    getEl("examFormTime").value = isEdit ? exam.timeLimit : 90;
    getEl("examFormKeys").value = isEdit && Array.isArray(exam.keys) ? exam.keys.join("|") : "";
    getEl("examFormCores").value = isEdit && Array.isArray(exam.cores) ? exam.cores.join("|") : "";
    let fullContent = "";
    if (isEdit && Array.isArray(exam.questionTexts)) {
        fullContent = exam.questionTexts.map((q, index) => {
            const e = exam.explanations[index];
            if (e && e.trim() !== '') {
                return `${q}\n\\begin{loigiai}\n${e}\n\\end{loigiai}`;
            }
            return q;
        }).join('\n\n');
    }
    getEl("examFormContent").value = fullContent;
    getEl("examFormModal").style.display = "flex";
}

function hideExamForm() { getEl("examForm("examFormTime").value = isEdit ? exam.timeLimit : 90;
    getEl("examFormKeys").value = isEdit && Array.isArray(exam.keys) ? exam.keys.join("|") : "";
    getEl("examFormCores").value = isEdit && Array.isArray(exam.cores) ? exam.cores.join("|") : "";
    let fullContent = "";
    if (isEdit && Array.isArray(exam.questionTexts)) {
        fullContent = exam.questionTexts.map((q, index) => {
            const e = exam.explanations[index];
            if (e && e.trim() !== '') {
                return `${q}\n\\begin{loigiai}\n${e}\n\\end{loigiai}`;
            }
            return q;
        }).join('\n\n');
    }
    getEl("examFormContent").value = fullContent;
    getEl("examFormModal").style.display = "flex";
}

function hideExamForm() { getEl("examFormModal").style.display = "none"; }

async function handleExamFormSubmit() {
    const examId = getEl("examId").value;
    const examData = {
        examCode: getEl("examFormCode").value.trim(),
        timeLimit: parseInt(getEl("examFormTime").value, 10),
        keys: getEl("examFormKeys").value.trim(),
        cores: getEl("examFormCores").value.trim(),
        content: getEl("examFormContent").value.trim(),
    };
    if (!examData.examCode || !examData.keys || !examData.content) {
        Swal.fire("Lỗi", "Các trường Mã đề, Đáp án, và Nội dung đề thi không được trống.", "error");
        return;
    }
    const functionName = examId ? "updateExam" : "addExam";
    const dataToSend = { examData };
    if (examId) dataToSend.examId = examId;
    showLoading();
    try {
        const result = await functions.httpsCallable(functionName)(dataToSend);
        Swal.fire("Thành công!", result.data.message, "success");
        hideExamForm();
        loadTeacherDataForDashboard();
    } catch (error) {
        Swal.fire("Lỗi", `Lỗi khi lưu đề thi: ${error.message}`, "error");
    } finally {
        hideLoading();
    }
Modal").style.display = "none"; }

async function handleExamFormSubmit() {
    const examId = getEl("examId").value;
    const examData = {
        examCode: getEl("examFormCode").value.trim(),
        timeLimit: parseInt(getEl("examFormTime").value, 10),
        keys: getEl("examFormKeys").value.trim(),
        cores: getEl("examFormCores").value.trim(),
        content: getEl("examFormContent").value.trim(),
    };
    if (!examData.examCode || !examData.keys || !examData.content) {
        Swal.fire("Lỗi", "Các trường Mã đề, Đáp án, và Nội dung đề thi không được trống.", "error");
        return;
    }
    const functionName = examId ? "updateExam" : "addExam";
    const dataToSend = { examData };
    if (examId) dataToSend.examId = examId;
    showLoading();
    try {
        const result = await functions.httpsCallable(functionName)(dataToSend);
        Swal.fire("Thành công!", result.data.message, "success");
        hideExamForm();
        loadTeacherDataForDashboard();
    } catch (error) {
        Swal.fire("Lỗi", `Lỗi khi lưu đề thi: ${error.message}`, "error");
    } finally {
        hideLoading();
    }
}

async function editExam(examId) {
    showLoading();
    try {
        const result = await functions.httpsCallable("getTeacherFullExam")({ examId });
        showExamForm(result.data);
    } catch (error) {
        Swal.fire("Lỗi", `Không thể tải chi tiết đề thi: ${error.message}`, "error");
    } finally {
        hideLoading();
    }
}

async function deleteExam(examId, examCode) {
    const result = await Swal.fire({ title: 'Xác nhận xóa', text: `Bạn có chắc muốn xóa đề thi "${examCode}"? Thao tác này không thể hoàn tác.`, icon: 'warning', showCancelButton: true, confirmButtonColor: '#d33', cancelButtonText: 'Hủy', confirmButtonText: 'Xóa!' });
    if (result.isConfirmed) {
        showLoading();
        try {
            await functions.httpsCallable("deleteExam")({ examId });
            Swal.fire("Đã xóa!", "}

async function editExam(examId) {
    showLoading();
    try {
        const result = await functions.httpsCallable("getTeacherFullExam")({ examId });
        showExamForm(result.data);
    } catch (error) {
        Swal.fire("Lỗi", `Không thể tải chi tiết đề thi: ${error.message}`, "error");
    } finally {
        hideLoading();
    }
}

async function deleteExam(examId, examCode) {
    const result = await Swal.fire({ title: 'Xác nhận xóa', text: `Bạn có chắc muốn xóa đề thi "${examCode}"? Thao tác này không thể hoàn tác.`, icon: 'warning', showCancelButton: true, confirmButtonColor: '#d33', cancelButtonText: 'Hủy', confirmButtonText: 'Xóa!' });
    if (result.isConfirmed) {
        showLoading();
        try {
            await functions.httpsCallable("deleteExam")({ examId });
            Swal.fire("Đã xóa!", "Đề thi đã được xóa.", "success");
            loadTeacherDataForDashboard();
        } catch (error) {
            Swal.fire("Lỗi", `Lỗi khi xóa: ${error.message}`, "error");
        } finally {
            hideLoading();
        }
    }
}

function showClassForm(classInfo = null) {
    const isEdit = !!classInfo;
    getEl("classFormTitle").textContent = isEdit ? `Sửa Lớp: ${classInfo.name}` : "Thêm Lớp mới";
    getEl("classId").value = isEdit ? classInfo.id : "";
    getEl("classFormName").value = isEdit ? classInfo.name : "";
    getEl("classFormStudents").value = isEdit && Array.isArray(classInfo.students) ? classInfo.students.join("\n") : "";
    getEl("classFormModal").style.display = "flex";
}
    
function hideClassForm() { getEl("classFormModal").style.display = "none"; }

async function handleClassFormSubmit() {
    const classId = getEl("classId").value;
    const className = getEl("classFormName").value.trim();
    const studentsStr = getEl("classFormĐề thi đã được xóa.", "success");
            loadTeacherDataForDashboard();
        } catch (error) {
            Swal.fire("Lỗi", `Lỗi khi xóa: ${error.message}`, "Students").value.trim();
    if (!className) {
        Swal.fire("Lỗi", "Tên lớp không được trống.", "error");
        return;
    }
    const classData = { name: className, students: studentsStr.split(/\r?\n/).filter(s => s.trim() !== "") };
    const functionName = classId ? "updateClass" : "addClass";
    const dataToSend = classId ? { classId, classData } : { classData };
    showLoading();
    try {
        const result = await functions.httpsCallable(functionName)(dataToSend);
        Swal.fire("Thành công!", result.data.message, "success");
        hideClassForm();
        loadTeacherDataForDashboard();
    } catch (error) {
        Swal.fire("Lỗi", `Lỗi khi lưu lớp học: ${error.message}`, "error");
    } finally {
        hideLoading();
    }
}

async function editClass(classId) {
    showLoading();
    try {
        const result = await functions.httpsCallable("getTeacherFullClass")({ classId });
        showClassForm(result.data);
    } catch (error) {
        Swal.fire("Lỗi", `Không thểerror");
        } finally {
            hideLoading();
        }
    }
}

function showClassForm(classInfo = null) {
    const isEdit = !!classInfo;
    getEl("classFormTitle").textContent = isEdit ? `Sửa Lớp: ${classInfo.name}` : "Thêm Lớp mới";
    getEl("classId").value = isEdit ? classInfo.id : "";
    getEl("classFormName").value = isEdit ? classInfo.name : "";
    getEl("classFormStudents").value = isEdit && Array.isArray(classInfo.students) ? classInfo.students.join("\n") : "";
    getEl("classFormModal").style.display = "flex";
}
    
function hideClassForm() { getEl("classFormModal").style.display = "none"; }

async function handleClassFormSubmit() {
    const classId = getEl("classId").value;
    const className = getEl("classFormName").value.trim();
    const studentsStr = getEl("classFormStudents").value.trim();
    if (!className) {
        Swal.fire("Lỗi", "Tên lớp không được trống.", "error");
        return;
    }
    const classData = { name: className, students: studentsStr.split(/\r?\n/).filter(s => s.trim() !== "") };
    const functionName = classId ? "updateClass" : "addClass";
    const dataToSend = classId ? { classId, classData } : { classData };
    showLoading();
    try {
        const result = await functions.httpsCallable(functionName)(dataToSend);
        Swal.fire("Thành công!", result.data.message, "success");
        hideClassForm();
        loadTeacherDataForDashboard();
    } catch (error) {
        Swal.fire("Lỗi", `Lỗi khi lưu lớp học: ${error.message}`, "error");
    } finally {
        hideLoading();
    }
}

async function editClass(classId) {
    showLoading();
    try {
        const result = await functions.httpsCallable("getTeacherFullClass")({ classId });
        showClassForm(result.data);
    } catch (error) {
        Swal.fire("Lỗi", `Không thể tải chi tiết lớp học: ${error.message}`, "error");
    } finally {
        hideLoading();
    }
}

async function deleteClass(classId, className) {
    const result = await Swal.fire({ title: 'Xác nhận xóa', text: `Bạn có chắc muốn xóa lớp "${className}"?`, icon: 'warning', showCancelButton: true, confirmButtonColor: '#d3 tải chi tiết lớp học: ${error.message}`, "error");
    } finally {
        hideLoading();
    }
}

async function deleteClass(classId, className) {
    const result = await Swal.fire({ title: 'Xác nhận xóa', text: `Bạn có chắc muốn xóa lớp "${className}"?`, icon: 'warning', showCancelButton: true, confirmButtonColor: '#d33', cancelButtonText: 'Hủy', confirmButtonText: 'Xóa!' });
    if (result.isConfirmed) {
        showLoading();
        try {
            await functions.httpsCallable("deleteClass")({ classId });
            Swal.fire("Đã xóa!", "Lớp học đã được xóa.", "success");
            loadTeacherDataForDashboard();
        } catch (error) {
            Swal.fire("Lỗi", `Lỗi khi xóa: ${error.message}`, "error");
        } finally {
            hideLoading();
        }
    }
}

// --- LUỒNG LÀM BÀI CỦA HỌC SINH ---
async function initializeClassDataForStudent() {
    const teacherAlias = getEl("teacherAlias").value.trim();
    if (!teacherAlias) return;
    try {
        const result = await functions.httpsCallable("getClassesForStudent")({ teacherAlias });
        classData = result.data;
        populateClassSelect();
    } catch (error) {
        Swal.fire("Lỗi", `Lỗi tải danh sách lớp: ${error.message}`, "error");
    }
}

function populateClassSelect() {
    const select = getEl("classSelect");
    select.innerHTML = `<option value="">-- Chọn lớp --</option>`;
    Object.keys(classData).sort().forEach(className => { select.add(new Option(className, className)); });
    select.onchange = updateStudentList;
    3', cancelButtonText: 'Hủy', confirmButtonText: 'Xóa!' });
    if (result.isConfirmed) {
        showLoading();
        try {
            await functions.httpsCallable("deleteClass")({ classId });
            Swal.fire("Đã xóa!", "Lớp học đã được xóa.", "success");
            loadTeacherDataForDashboard();
        } catch (error) {
            Swal.fire("Lỗi", `Lỗi khi xóa: ${error.message}`, "error");
        } finally {
            hideLoading();
        }
    }
}

// --- LUỒNG LÀM BÀI CỦA HỌC SINH ---
async function initializeClassDataForStudent() {
    const teacherAlias = getEl("teacherAlias").value.trim();
    if (!teacherAlias) return;
    try {
        const result = await functions.httpsCallable("getClassesForStudent")({ teacherAlias });
        classData = result.data;
        populateClassSelect();
    } catch (error) {
        Swal.fire("Lỗi", `Lỗi tải danh sách lớp: ${error.message}`, "error");
    }
}

function populateClassSelect() {
    const select = getEl("classSelect");
    select.innerHTML = `<option value="">-- Chọn lớp --</option>`;
    Object.keys(classData).sort().forEach(className => { select.add(new Option(className, className)); });
    select.onchange =updateStudentList();
}

function updateStudentList() {
    const studentSelect = getEl("studentSelect");
    const selectedClass = getEl("classSelect").value;
    studentSelect.innerHTML = `<option value="">-- Chọn tên --</option>`;
    if (selectedClass && classData[selectedClass]) {
        classData[selectedClass].sort().forEach(student => { studentSelect.add(new Option(student, student)); });
    }
}

async function startExam() {
    const teacherAlias = getEl("teacherAlias").value.trim();
    const examCode = getEl("examCode").value.trim();
    const studentName = getEl("studentSelect").value;
    const className = getEl("classSelect").value;
    if (!teacherAlias || !examCode || !studentName || !className) {
        Swal.fire("Cảnh báo", "Vui lòng nhập đầy đủ thông tin!", "warning");
        return;
    }
    showLoading();
    try {
        const result = await functions.httpsCallable("loadExamForStudent")({ teacherAlias, examCode });
        hideLoading();
        if (!result.data || !result.data.questionTexts || result.data.questionTexts.length === 0) {
            Swal.fire("Lỗi", `Không tìm thấy đề thi ${examCode} của giáo viên này.`, "error");
            showStudentLoginScreen();
            return;
        }
        examData = { ...result.data, studentName, className, examCode, teacherAlias };
        sessionStorage.setItem('currentExamData', JSON.stringify(examData));
        showScreen('quiz');
        getEl("timer-container").style.display = 'block';
        getEl("gradeBtn").style.display = 'inline-flex';
        startTimer(examData.timeLimit || 90);
        loadQuiz(examData); updateStudentList;
    updateStudentList();
}

function updateStudentList() {
    const studentSelect = getEl("studentSelect");
    const selectedClass = getEl("classSelect").value;
    studentSelect.innerHTML = `<option value="">-- Chọn tên --</option>`;
    if (selectedClass && classData[selectedClass]) {
        classData[selectedClass].sort().forEach(student => { studentSelect.add(new Option(student, student)); });
    }
}

async function startExam() {
    const teacherAlias = getEl("teacherAlias").value.trim();
    const examCode = getEl("examCode").value.trim();
    const studentName = getEl("studentSelect").value;
    const className = getEl("classSelect").value;
    if (!teacherAlias || !examCode || !studentName || !className) {
        Swal.fire("Cảnh báo", "Vui lòng nhập đầy đủ thông tin!", "warning");
        return;
    }
    showLoading();
    try {
        const result = await functions.httpsCallable("loadExamForStudent")({ teacherAlias, examCode });
        hideLoading();
        if (!result.data || !result.data.questionTexts || result.data.questionTexts.length === 0) {
            Swal.fire("Lỗi", `Không tìm thấy đề thi ${examCode} của giáo viên này.`, "error");
            showStudentLoginScreen();
            return;
        }
        examData = { ...result.data, studentName, className, examCode, teacherAlias };
        sessionStorage.setItem('currentExamData', JSON.stringify(examData));
        showScreen('quiz');
        getEl("timer-container").style.display = 'block';
        getEl("gradeBtn").style.display = 'inline-flex';
        startTimer(examData.timeLimit || 90);
        loadQuiz(examData);
    } catch (error) {
        hideLoading();
        Swal.fire("Lỗi", `Lỗi tải đề thi: ${error.message}`, "error");
        showStudentLoginScreen();
    }
}

function startTimer(minutes){ const endTime=Date.now()+minutes*60*1e3; getEl("timer-container").style.display="block"; updateTimerDisplay(Math.floor((endTime-Date.now())/1e3)); timerInterval=setInterval(()=>{ let timeRemaining=Math.max(0,Math.floor((endTime-Date.now())/1e3)); updateTimerDisplay
    } catch (error) {
        hideLoading();
        Swal.fire("Lỗi", `Lỗi tải đề thi: ${error.message}`, "error");
        showStudentLoginScreen();
    }
}

function startTimer(minutes){ const endTime=Date.now()+minutes*60*1e3; getEl("timer-container").style.display="block"; updateTimerDisplay(Math.floor((endTime-Date.now())/1e3)); timerInterval=setInterval(()=>{ let timeRemaining=Math.max(0,Math.floor((endTime-Date.now())/1e3)); updateTimerDisplay(timeRemaining); if(timeRemaining<=0){clearInterval(timerInterval);Swal.fire({icon:"warning",title:"Hết giờ!",text:"Bài thi sẽ tự động nộp.",timer:3e3,timerProgressBar:true,showConfirmButton:false}).then(()=>gradeQuiz())}},1e3)}
function updateTimerDisplay(seconds){ const m=Math.floor(seconds/60),s=seconds%60; getEl("timer").textContent=`Thời gian còn lại: ${m} phút ${s<10?"0":""}${s} giây`}

function loadQuiz(data){
    const quizContainer=getEl("quiz");
    quizContainer.innerHTML = ""; // Clear previous content
    data.questionTexts.forEach((questionText,i)=>{
        const questionDiv=document.createElement("div");
        questionDiv.className="question";
        
        // Add question number, similar to GAS style
        let questionNumberP = document.createElement("p");
        questionNumberP.textContent = `Câu ${i + 1}`;
        questionDiv.appendChild(questionNumberP);

        const statementDiv=document.createElement("div");
        statement(timeRemaining); if(timeRemaining<=0){clearInterval(timerInterval);Swal.fire({icon:"warning",title:"Hết giờ!",text:"Bài thi sẽ tự động nộp.",timer:3e3,timerProgressBar:true,showConfirmButton:false}).then(()=>gradeQuiz())}},1e3)}
function updateTimerDisplay(seconds){ const m=Math.floor(seconds/60),s=seconds%60; getEl("timer").textContent=`Thời gian còn lại: ${m} phút ${s<10?"0":""}${s} giây`}

function loadQuiz(data){
    const quizContainer=getEl("quiz");
    quizContainer.innerHTML="";
    data.questionTexts.forEach((rawQuestionText,i)=>{
        const questionText = processImagePlaceholders(rawQuestionText); // Xử lý placeholder hình ảnh
        const explanationText = processImagePlaceholders(data.explanations[i] || ''); // Xử lý placeholder lời giải

        const questionDiv=document.createElement("div");
        questionDiv.className="question";
        questionDiv.innerHTML = `<p class="question-number">Câu ${i + 1}</p>`; // Thêm class cho số câu hỏi
        
        const statementDiv=document.createElement("div");
        statementDiv.className="question-statement";
        statementDiv.innerHTML=questionText;
        questionDiv.appendChild(statementDiv);
        
        const type=data.questionTypes?data.questionTypes[i]:null;

        if(type==="MC"){ 
            let mcOptions=document.createElement("div"); mcOptions.className="mc-options"; 
            ["A","B","C","D"].forEach(o=>{ 
                let optDiv=document.createElement("div"); optDiv.className="mc-optionDiv.className="question-statement";
        statementDiv.innerHTML = processImagePlaceholders(questionText); // Xử lý placeholder hình ảnh ở đây
        questionDiv.appendChild(statementDiv);
        
        const type=data.questionTypes?data.questionTypes[i]:null;
        if(type==="MC"){ 
            let mcOptions=document.createElement("div"); 
            mcOptions.className="mc-options"; 
            ["A","B","C","D"].forEach(o=>{ 
                let optDiv=document.createElement("div"); 
                optDiv.className="mc-option"; 
                optDiv.textContent=o; 
                let input=document.createElement("input"); 
                input.type="radio"; 
                input.name=`q${i}`; 
                input.value=o; 
                input.style.display="none"; 
                optDiv.appendChild(input); 
                optDiv.onclick=()=>{
                    document.querySelectorAll(`div[data-question-index='${i}'] .mc-option`).forEach(r=>r.classList.remove("selected"));
                    input.checked=true;
                    optDiv.classList.add("selected");
                }; 
                mcOptions.appendChild(optDiv);
            }); 
            questionDiv.appendChild(mcOptions); 
            questionDiv.setAttribute('data-question-index', i);
        } else if(type==="TF"){ 
            let tfOptions=document.createElement("div"); 
            tfOptions"; optDiv.textContent=o; 
                let input=document.createElement("input"); input.type="radio"; input.name=`q${i}`; input.value=o; input.style.display="none"; 
                optDiv.appendChild(input); 
                optDiv.onclick=()=>{
                    document.querySelectorAll(`div[data-question-index='${i}'] .mc-option`).forEach(r=>r.classList.remove("selected"));
                    input.checked=true;
                    optDiv.classList.add("selected");
                }; 
                mcOptions.appendChild(optDiv);
            }); 
            questionDiv.appendChild(mcOptions); .className="tf-options"; 
            const numSubs=data.tfCounts?data.tfCounts[i]:0; 
            for(let j=0;j<numSubs;j++){ 
                let tfBox=document.createElement("div"); 
                tfBox.className="tf-box"; 
                let group=`q${i}_sub${j}`; 
                tfBox.dataset.group=group; 
                
                let tBtn=document.createElement("div"); 
                tBtn.className="tf-btn"; 
                tBtn.textContent="T"; 
                let tInput=document.createElement("input"); 
                tInput.type="radio"; 
                tInput.name=group; 
                tInput.value="T"; 
                tInput.style.display="none"; 
                tBtn.appendChild(tInput);
            questionDiv.setAttribute('data-question-index', i); // Dùng cho việc quản lý class selected
        }
        else if(type==="TF"){ 
            let tfOptions=document.createElement("div"); tfOptions.className="tf-options"; 
            const numSubs=data.tfCounts?data.tfCounts[i]:0; 
            for(let j=0;j<numSubs;j++){ 
                let box=document.createElement("div"); box.className="tf-box"; 
                let group=`q${i}_sub${j}`; box.dataset.group=group; 
                
                let tBtn=document.createElement("div"); tBtn.className="tf-btn"; tBtn.textContent="T"; 
                let tInput=document.createElement("input"); tInput.type="radio"; tInput.name=group; tInput.value="T"; tInput.style.display="none"; 
                tBtn.appendChild(tInput); 
                
                let fBtn=document.createElement("div"); fBtn 
                
                let fBtn=document.createElement("div"); 
                fBtn.className="tf-btn"; 
                fBtn.textContent="F"; 
                let fInput=document.createElement("input"); 
                fInput.type="radio"; 
                fInput.name=group; 
                fInput.value="F"; 
                fInput.style.display="none"; 
                fBtn.appendChild(fInput); 
                
                tBtn.onclick=()=>{
                    document.querySelectorAll(`div[data-group='${group}'] .tf-btn`).forEach(r=>r.classList.remove("selected","T","F"));
                    tInput.checked=true;
                    tBtn.classList.add("selected","T");
                }; 
                fBtn.onclick=()=>{
                    document.querySelectorAll(`div[data-group='${group}'] .tf-btn`).forEach(r=>r.classList.remove("selected","T","F"));
                    fInput.checked=true;
                    fBtn.classList.add("selected","F");.className="tf-btn"; fBtn.textContent="F"; 
                let fInput=document.createElement("input"); fInput.type="radio"; fInput.name=group; fInput.value="F"; fInput.style.display="none"; 
                fBtn.appendChild(fInput); 
                
                tBtn.onclick=()=>{
                    document.querySelectorAll(`div[data-group='${group}'] .tf-btn`).forEach(r=>r.classList.remove("selected","T","F"));
                    tInput.checked=true;tBtn.classList.add("selected","T");
                }; 
                fBtn.onclick=()=>{
                    document.querySelectorAll(`div[data-group='${group}'] .tf-btn`).forEach(r=>r.classList.remove("selected","T","F"));
                    fInput.checked=true;fBtn.classList.add("selected","F");
                }; 
                box.appendChild(tBtn); box.appendChild(fBtn); tfOptions.appendChild(box);
            } 
            questionDiv.appendChild(tfOptions); 
        }
        else if(type==="Numeric"){ 
            let numDiv=document.createElement("div"); numDiv.className="numeric-option"; 
            let input=document.createElement("input"); input.
                }; 
                
                tfBox.appendChild(tBtn); 
                tfBox.appendChild(fBtn); 
                tfOptions.appendChild(tfBox);
            } 
            questionDiv.appendChild(tfOptions); 
            // Thêm div hiển thị điểm TF
            let tfGradeDisplay = document.createElement("div");
            tfGradeDisplay.className = "tf-grade";
            tfGradeDisplay.id = `tf-grade-${i}`; // ID để cập nhật sau khi chấm
            questionDiv.appendChild(tfGradeDisplay);

        } else if(type==="Numeric"){ 
            let numDiv=document.createElement("div"); 
            numDiv.className="numeric-option"; 
            let input=document.createElement("input"); 
            input.type="text"; 
            input.name=`q${i}`; 
            input.placeholder="type="text"; input.name=`q${i}`; input.placeholder="Nhập đáp số"; 
            numDiv.appendChild(input); 
            questionDiv.appendChild(numDiv); 
        }
        
        // Lời giải
        if (explanationText.trim() !== '') {
            let toggleBtn = document.createElement("button");
            toggleBtn.className = "toggle-explanation btn";
            toggleBtn.textContent = "Xem lời giải";
            let expDiv = document.createElement("div");
            expDiv.className = "explanation hidden";
            expDiv.innerHTML = explanationText;
            toggleBtn.onclick = function(){ expDiv.classList.toggle("hidden"); this.textContent = expDiv.classList.contains("hidden") ? "Xem lời giải" : "Ẩn lời giải"; };
            questionDiv.appendChild(toggleBtn);
            questionNhập đáp số"; 
            numDiv.appendChild(input); 
            questionDiv.appendChild(numDiv); 
        }
        
        quizContainer.appendChild(questionDiv);
        renderKatexInElement(questionDiv);
    });
    document.getElementById("quiz").style.display = "block";
    document.getElementById("gradeBtn").style.display = "inline-flex"; // Hiển thị nút nộp bài
}

function gradeQuiz(isCheating = false){
    if(timerInterval) clearInterval(timerInterval);
    if (!examData) {
        const storedData = sessionStorage.getItem('currentExamData');
        if (storedData) { examData = JSON.parse(storedData); }
        else { Swal.fire("Lỗi nghiêm trọng", "Mất dữ liệu bài thi. Vui lòng thử lại từ đầu.", "error").then(() => showStudentDiv.appendChild(expDiv);
        }

        quizContainer.appendChild(questionDiv);
        renderKatexInElement(questionDiv); // Render KaTeX sau khi thêm vào DOM
    });
}

function gradeQuiz(isCheating = false){
    if(timerInterval) clearInterval(timerInterval);
    if (!examData) {
        const storedData = sessionStorage.getItem('currentExamData');
        if (storedData) { examData = JSON.parse(storedData); }
        else { Swal.fire("Lỗi nghiêm trọng", "Mất dữ liệu bài thi. Vui lòng thử lại từ đầu.", "error").then(() => showStudentLoginScreen()); return; }
    }
    let unanswered=[];
    if(!isCheating){
        for(let i=0; i < examData.questionTexts.length; i++){
            const type = examData.questionTypes[i];
            if(type === "MC"){ 
                if(!document.querySelector(`input[name='q${i}']:checked`)) {
                    unanswered.push(examData.questionTexts[LoginScreen()); return; }
    }
    let unanswered=[];
    // Logic kiểm tra câu hỏi chưa làm (đã có và đang hoạt động đúng)
    if(!isCheating){
        for(let i=0; i < examData.questionTexts.length; i++){
            const type = examData.questionTypes[i];
            if(type === "MC"){ if(!document.querySelector(`input[name='q${i}']:checked`)) unanswered.push(`Câu ${i + 1}`); }
            else if(type === "TF"){ 
                for(let j=0; j < examData.tfCounts[i]; j++){ 
                    if(!document.querySelector(`input[name='q${i}_sub${j}']:checked`)) unanswered.push(`Câu ${i + 1} (ý ${String.fromCharCode(97 + j)})i].split(':')[0] || `Câu ${i + 1}`); 
                }
            }
            else if(type === "TF"){ 
                // Kiểm tra từng ô con của True/False
                const numSubs = examData.tfCounts[i] || 0;
                for(let j=0; j < numSubs; j++){ 
                    if(!document.querySelector(`input[name='q${i}_sub${j}']:checked`)) {
                        unanswered.push(`${examData.questionTexts[i].split(':')[0] || `Câu ${i + 1}`} (Ý ${j + 1})`); 
                    }
                }
            }
`); 
                } 
            }
            else if(type === "Numeric"){ const input = document.querySelector(`input[name='q${i}']`); if(!input || input.value.trim() === "") unanswered.push(`Câu ${i + 1}`); }
        }
    }
    if(unanswered.length > 0){ showUnansweredDialog(unanswered); return; } // Nếu có câu chưa làm, dừng lại
    
    let payload = { teacherAlias: examData.teacherAlias, examCode: examData.examCode, studentName: examData.studentName, className: examData.className, isCheating: isCheating            else if(type === "Numeric"){ 
                const input = document.querySelector(`input[name='q${i}']`); 
                if(!input || input.value.trim() === "") {
                    unanswered.push(examData.questionTexts[i].split(':')[0] || `Câu ${i + 1}`); 
                }
            }
        }
    }
    
    // Nếu có câu chưa trả lời và không phải là do gian lận, hiển thị cảnh báo
    if(unanswered.length > 0 && !isCheating){ 
        showUnansweredDialog(unanswered); 
        return; 
    }
    , answers: {} };
    if (!isCheating) { document.querySelectorAll("input[type='radio']:checked, input[type='text'][name^='q']").forEach(input => { if (input.type !== "text" || input.value.trim() !== "") { payload.answers[input.name] = input.value.trim(); } }); }
    Swal.fire({ title:"Đang nộp bài...", html: "Vui lòng chờ trong giây lát...", allowOutsideClick:false, didOpen:() => Swal.showLoading() });
    functions.httpsCallable("submitExam")(payload).then(result => {
        Swal
    let payload = { teacherAlias: examData.teacherAlias, examCode: examData.examCode, studentName: examData.studentName, className: examData.className, isCheating: isCheating, answers: {} };
    // Thu thập đáp án chỉ khi không gian lận (để tránh gửi rỗng cho bài gian lận)
    if (!isCheating) { 
        document.querySelectorAll("input[type='radio']:checked, input[.close();
        sessionStorage.removeItem('currentExamData');
        const { score, examData: serverExamData, detailedResults } = result.data;
        getEl("score").textContent = score.toFixed(2);
        getEl("student-name").textContent = examData.studentName;
        getEl("student-class").textContent = examData.className;
        getEl("exam-code").textContent = examData.examCode;
        showScreen("result-container");
        
        // Hiển thị chi tiết bài làm sau khi chấm điểm
        const quizContainerForResults = getEl("quiz");
        quizContainerForResults.type='text'][name^='q']").forEach(input => { 
            if (input.type !== "text" || input.value.trim() !== "") { 
                payload.answers[input.name] = input.value.trim(); 
            } 
        }); 
    }
    
    Swal.fire({ title:"Đang nộp bài...", html: "Vui lòng chờ trong giây lát...", allowOutsideClick:falseinnerHTML = ''; // Clear quiz container for results display
        
        serverExamData.questionTexts.forEach((questionText, i) => { 
            const questionDiv = document.createElement("div");
            questionDiv.className = "question";
            
            // Question number
            let questionNumberP = document.createElement("p");
            questionNumberP.textContent = `Câu ${i + 1}`;
            questionDiv.appendChild(question, didOpen:() => Swal.showLoading() });
    functions.httpsCallable("submitExam")(payload).then(result => {
        Swal.close();
        sessionStorage.removeItem('currentExamData');
        const { score, examData: serverExamData, detailedResults } = result.data;
        
        getEl("score").textContent = score.toFixed(2);
        getEl("student-name").textContent = examData.studentNameNumberP);

            const statementDiv = document.createElement("div");
            statementDiv.className = "question-statement";
            statementDiv.innerHTML = processImagePlaceholders(questionText); // Xử lý placeholder hình ảnh
;
        getEl("student-class").textContent = examData.className;
        getEl("exam-code").textContent = examData.examCode;
        showScreen("result-container");
        
        const            questionDiv.appendChild(statementDiv);
            
            const resultForQ = detailedResults[`q${i}`];
            const type = examData.questionTypes[i]; // Lấy type từ examData ban đầu
            
            if quizContainerForResults = getEl("quiz");
        quizContainerForResults.innerHTML = ''; // Xóa bài thi cũ

        serverExamData.questionTexts.forEach((rawQuestionText, i) => { 
            const questionText =(resultForQ){ 
                const answerDiv = document.createElement("div");
                answerDiv.className = "answer-feedback";
                let feedbackHtml = `<strong>Đáp án của bạn:</strong> `;
                
                // Hiển thị đáp án của học sinh
                if (type === "TF") {
                    feedbackHtml += (resultForQ.userAnswer && resultForQ.userAnswer.join(", ")) || "Chưa trả lời";
 processImagePlaceholders(rawQuestionText); // Xử lý placeholder
            const explanationText = processImagePlaceholders(serverExamData.explanations[i] || ''); // Xử lý placeholder

            const questionDiv = document.createElement("div");
            questionDiv.className = "question";
            questionDiv.innerHTML = `<p class="question-number">Câu ${i + 1}</p>`; // Thêm class cho số câu hỏi

            const statementDiv = document.                } else if (type === "Numeric") {
                    feedbackHtml += resultForQ.userAnswer || "Chưa trả lời";
                } else { // MC
                    feedbackHtml += resultForQ.userAnswer || "Chưa trả lời";
                }
                
                feedbackHtml += `<br><strong>Đáp án đúng:</strong> `;
                // Hiển thị đáp án đúng
                if (type === "TF") {
                    feedbackHtml += resultForQcreateElement("div");
            statementDiv.className = "question-statement";
            statementDiv.innerHTML = questionText;
            questionDiv.appendChild(statementDiv);
            
            const resultForQ = detailedResults[`q${i}`];
            if (resultForQ) {
                const answerDiv = document.createElement("div");
                answerDiv.className = "answer-feedback";
                let feedbackHtml = `<strong>Đáp án.correctAnswer.split('').join(", "); // For TF, split 'TF' to 'T, F'
                } else {
                    feedbackHtml += resultForQ.correctAnswer;
                }

                // Hiển thị điểm và màu sắc feedback
                if (resultForQ.scoreEarned > 0) {
                    answerDiv.classList.add("correct");
                    feedbackHtml += `<br><span class="score-earned"> của bạn:</strong> `;
                
                if (resultForQ.type === "TF") {
                    feedbackHtml += (resultForQ.userAnswer && resultForQ.userAnswer.join(", ")) || "Chưa trả lời";
                } else if (resultForQ.type === "Numeric") {
                    feedbackHtml += resultForQ.userAnswer || "Chưa trả lời";
                } else { // MC, Unknown, Invalid
                    feedbackHtml +=(${resultForQ.scoreEarned.toFixed(2)} điểm)</span>`;
                } else {
                    answerDiv.classList.add("incorrect");
                }
                answerDiv.innerHTML = feedbackHtml;
                questionDiv.appendChild(answerDiv);

                // Highlight đáp án đúng trên giao diện (nếu là MC/TF)
                if (type === "MC") {
                    const selectedMcOption = questionDiv.querySelector(`.mc-option input resultForQ.userAnswer || "Chưa trả lời";
                }
                
                feedbackHtml += `<br><strong>Đáp án đúng:</strong> `;
                if (resultForQ.type === "TF") {
                    feedbackHtml += (resultForQ.correctAnswer && resultForQ.correctAnswer.split('').join(", ")) || "Chưa có"; 
                } else {
                    feedbackHtml += resultForQ.correctAnswer || "Chưa có";
                }

                if (resultForQ.scoreEarned > 0) {
                    answerDiv.classList.add("correct");
                    feedbackHtml += `<br><span class="score-earned">(${resultForQ[value='${resultForQ.userAnswer}']`)?.parentElement;
                    if (selectedMcOption) {
                        selectedMcOption.classList.add('selected'); // Keep selected state
                    }
                    const correctMcOption = questionDiv.querySelector(`.mc-option input[value='${resultForQ.correctAnswer}']`)?.parentElement;
                    if (correctMcOption) {
                        correctMcOption.classList.add('correct-answer'); // Highlight correct
                    }
.scoreEarned.toFixed(2)} điểm)</span>`;
                } else {
                    answerDiv.classList.add("incorrect");
                }
                answerDiv.innerHTML = feedbackHtml;
                questionDiv.appendChild(answerDiv);

                } else if (type === "TF") {
                    for(let j=0; j < resultForQ.correctAnswer.length; j++) {
                        const correctTfBtn = questionDiv.querySelector(`.tf-box[data-group='q${i}_sub${j}'] .tf-btn:contains(${resultForQ.correctAnswer[j]})`);
                        if (correctTfBtn) {
                            correctTfBtn.classList.                // Highlight correct answers in the original quiz options
                // MC:
                if (resultForQ.type === "MC") {
                    const mcOptionDivs = questionDiv.querySelectorAll(`.mc-option`);
                    mcOptionDivs.forEach(optDiv => {
                        if (optDiv.textContent.trim() === resultForQ.correctAnswer) {
                            optDiv.classList.add("correct-answer-highlight");
                        }
add('correct-answer');
                        }
                    }
                } else if (type === "Numeric") {
                     const numericInput = questionDiv.querySelector(`input[name='q${i}']`);
                     if(numericInput) {
                        if (optDiv.classList.contains("selected") && optDiv.textContent.trim() !== resultForQ.correctAnswer) {
                            optDiv.classList.add("incorrect-answer-highlight");
                        }
                    });
                } 
                // TF:
                else if (resultForQ.type === "TF") {
                    const tfBoxes = questionDiv.querySelectorAll(`.tf-box`);
                    resultForQ.correctAnswer.                        numericInput.value = resultForQ.userAnswer || ''; // Display user's answer
                        if(resultForQ.scoreEarned > 0) {
                            numericInput.parentElement.classList.add('correct');
                        }
                        let answerSpan = document.createElement("span"); // Create a span for correct answer display
                        answerSpan.className = "correct-answer-display";
                        answerSpan.textContent = `Đáp án đúng: ${resultForQ.split('').forEach((correctSubAns, j) => {
                        const tfBtnEl = tfBoxes[j]?.querySelector(`.tf-btn[data-value="${correctSubAns}"]`); // Assuming tf-btn has data-valuecorrectAnswer}`;
                        numericInput.parentElement.appendChild(answerSpan);
                     }
                }
            }

            const explanationText = serverExamData.explanations[i];
            if (explanationText && explanationText.trim() !== '') {
                let toggleBtn = document.createElement("button");
                toggleBtn.className = "toggle-explanation btn";
                toggleBtn.textContent = "Xem lời giải";
                let exp now
                        if (tfBtnEl) {
                            tfBtnEl.classList.add("correct-answer-highlight");
                        }
                        // Highlight incorrect selected TF
                        const selectedTfBtn = tfBoxes[j]?.querySelector(`.tf-btn.selected`);
                        if (selectedTfBtn && selectedTfBtn.textContent.trim() !== correctSubAns) {
                            selectedTfBtn.classList.add("incorrect-answer-highlight");
                        }Div = document.createElement("div");
                expDiv.className = "explanation hidden";
                expDiv.innerHTML = processImagePlaceholders(explanationText); // Xử lý placeholder hình ảnh
                toggleBtn.onclick = function(){ expDiv.classList.toggle("hidden"); this.textContent = expDiv.classList.contains("hidden") ? "Xem lời giải" : "Ẩn lời giải"; };
                questionDiv.appendChild(toggleBtn);
                    });
                } 
                // Numeric:
                else if (resultForQ.type === "Numeric") {
                    const numericInputDiv = questionDiv.querySelector(`.numeric-option`);
                    if (numericInputDiv) {
                        if (parseFloat(resultForQ.userAnswer) === parseFloat(resultForQ.correctAnswer)) {
                             numericInputDiv.classList.add("correct-answer-highlight");
                        } else if
                questionDiv.appendChild(expDiv);
                toggleBtn.style.display = 'block'; // Hiển thị nút lời giải sau khi chấm
            }
            quizContainerForResults.appendChild(questionDiv);
            renderKatexInElement(questionDiv); // Render KaTeX after adding HTML
        });
        getEl("quiz").style.display = 'block'; // Hiển thị chi tiết bài làm sau khi chấm điểm
        getEl("gradeBtn").style (resultForQ.userAnswer.trim() !== '') { // Only if user answered but it's wrong
                             numericInputDiv.classList.add("incorrect-answer-highlight");
                        }
                    }
                }
            }

            // Display explanation (if available)
            if (explanationText.trim() !== '') {
                let toggleBtn = document.createElement("button");
                toggleBtn.className = "toggle-explanation btn";
                toggle.display = 'none'; // Ẩn nút nộp bài sau khi nộp
    }).catch(error => {
        Swal.close();
        Swal.fire("Lỗi", `Lỗi nộp bài: ${error.message}`, "error");
        showStudentLoginScreen();
    });
}

function showUnansweredDialog(unanswered){
    Swal.fire({ 
        icon:"info", 
        title:"Chưa làm xong", 
Btn.textContent = "Xem lời giải";
                let expDiv = document.createElement("div");
                expDiv.className = "explanation hidden";
                expDiv.innerHTML = explanationText;
                toggleBtn.onclick = function(){ expDiv.classList.toggle("hidden"); this.textContent = expDiv.classList.contains("hidden") ? "Xem lời giải" : "Ẩn lời giải"; };
                questionDiv.appendChild(toggleBtn        html:`<p>Bạn chưa trả lời các câu sau:</p><ul style="text-align:left; max-height: 200px; overflow-y:auto;">${unanswered.map(q);
                questionDiv.appendChild(expDiv);
            }
            quizContainerForResults.appendChild(questionDiv);
            renderKatexInElement(questionDiv);
        });
        getEl("quiz").style=>`<li>${q}</li>`).join("")}</ul>`, 
        confirmButtonText:"OK" 
    });
}

// GÁN CÁC HÀM CẦN GỌI TỪ HTML VÀO ĐỐI TƯỢNG WINDOW
window.signInWithGoogle = signInWithGoogle;
window.signOut = signOut;
window.updateTeacherAlias = updateTeacherAlias;
window.showTeacherDashboard = showTeacherDashboard;.display = 'block'; // Hiển thị chi tiết bài làm sau khi chấm điểm
    }).catch(error => {
        Swal.close();
        Swal.fire("Lỗi", `Lỗi nộp bài: ${error.message}`, "error");
        showStudentLoginScreen();
    });
}

function showUnansweredDialog(unanswered){
    Swal.fire({ icon:"info", title:"Chưa làm xong", html:`<p>Bạn chưa trả lời các câu sau:</p><ul style="text-align:left; max-height: 200px; overflow-y:auto;">${unanswered.map(q=>
window.hideTeacherDashboard = hideTeacherDashboard;
window.showExamForm = showExamForm;
window.hideExamForm = hideExamForm;
window.handleExamFormSubmit = handleExamFormSubmit;
window.showClassForm = showClassForm;
window.hideClassForm = hideClassForm;
window.handleClassFormSubmit = handleClassFormSubmit;
window.startExam = startExam;
window.gradeQuiz = gradeQuiz;
window.editExam = editExam;
window.deleteExam = deleteExam;
window.editClass = editClass;
window.deleteClass = deleteClass;
window.showTeacherLogin = showTeacher`<li>${q}</li>`).join("")}</ul>`, confirmButtonText:"OK" });
}

// GÁN CÁC HÀM CẦN GỌI TỪ HTML VÀO ĐỐI TƯỢNG WINDOW
window.signInWithGoogle = signInWithGoogle;
window.signOut = signOut;
window.updateTeacherAlias = updateTeacherAlias;
window.showTeacherDashboard = showTeacherDashboard;
window.hideTeacherDashboard = hideTeacherDashboard;
window.showExamForm = showExamForm;
window.hideExamForm = hideExamForm;
window.handleExamFormSubmit = handleExamFormSubmit;
window.showClassForm = showLoginScreen; 
window.showStudentLogin = showStudentLoginScreen;

// --- EVENT LISTENERS ---
document.addEventListener('DOMContentLoaded', () => {
    const teacherAliasInput = getEl("teacherAlias");
    if (teacherAliasInput) {
        teacherAliasInput.addEventListener("change", initializeClassDataForStudent);
    }
});

let tabSwitchCount=0;
document.addEventListener("visibilitychange", function() {
    if (getEl("quiz") && getEl("quiz").style.display !== 'block' || !document.hidden) return;
    
    tabSwitchCount++;
    if (tabSwitchCount >= 3) {
        Swal.fire({
            icon:"warning",
            title:"Chuyển tab quá nhiều!",
            text:"Bài thi của bạn sẽ tự động bị nộp với 0 điểm.",
            timer:ClassForm;
window.hideClassForm = hideClassForm;
window.handleClassFormSubmit = handleClassFormSubmit;
window.startExam = startExam;
window.gradeQuiz = gradeQuiz;
window.editExam = editExam;
window.deleteExam = deleteExam;
window.editClass = editClass;
window.deleteClass = deleteClass;
window.showTeacherLogin = showTeacherLoginScreen; 
window.showStudentLogin = showStudentLoginScreen;

// --- EVENT LISTENERS ---
document.addEventListener('DOMContentLoaded', () => {
    const teacherAliasInput = getEl("teacherAlias");
    if (teacherAliasInput) {
        teacherAliasInput.addEventListener("change", initializeClassDataForStudent);
    }
});

let tabSwitchCount=0;
document.addEventListener("visibilitychange", function() {
    if (getEl("quiz").style.display3000,
            timerProgressBar:true,
            showConfirmButton:false
        }).then(()=>gradeQuiz(true));
    } else {
        Swal.fire({
            icon:"warning",
            title:"Cảnh báo chuyển tab",
            text:`Bạn đã chuyển tab ${tabSwitchCount} lần. Chuyển 3 lần, bài thi sẽ tự động bị nộp.`,
            timer:2000,
            timerProgressBar:true,
            showConfirmButton:false
        });
    }
});
```

---

### Bước 3: Cập nhật CSS (`public/css/style.css`)

Đây !== 'block' || !document.hidden) return;
    
    tabSwitchCount++;
    if (tabSwitchCount >= 3) {
        Swal.fire({
            icon:"warning",
            title:"Chuyển tab quá nhiều!",
            text:"Bài thi của bạn sẽ tự động bị nộp với 0 điểm.",
            timer:3000, 
            timerProgressBar:true,
            showConfirmButton:false
        }).then(()=>gradeQuiz(true));
    } else {
        Swal.fire({
            icon:"warning",
            title:"Cảnh báo chuyển tab",
            text:`Bạn đã là phần lớn nhất, nơi chúng ta sẽ truyền cảm hứng từ mã GAS để có giao diện đẹp và "đẳng cấp" hơn, đặc biệt cho các nút và màn hình chính.

```css
/* public/css/style.css - Phiên bản nâng cấp chuyên gia (Hoàn chỉnh 100%) */

/* --- 1. CSS Custom Properties (Variables) --- */
:root {
  /* Colors */
  --primary-color: #007bff; /* Main brand blue */
  --primary-color-dark: #0056b3;
  --secondary-color: #6c757d; /* Grey for secondary actions */
   chuyển tab ${tabSwitchCount} lần. Chuyển 3 lần, bài thi sẽ tự động bị nộp.`,
            timer:2000,
            timerProgressBar:true,
            showConfirmButton:false
        });
    }
});
```

---

### Bước 3: Cập nhật `public/css/style.css`

Tôi đã thêm rất nhiều CSS để tái hiện giao diện của bộ GAS bạn cung cấp, bao gồm:
*   Định nghĩa lại các CSS Variables cho màu sắc cụ thể của GAS.
*   Cải thiện giao diện `login-container` và các `input` trong đó.
*   Thiết kế lại--secondary-color-dark: #5a6268;
  --success-color: #28a745;
  --success-color-light: #d4edda; /* Light green for success backgrounds */
  --danger-color: #dc3545;
  --danger-color-light: #f8d7da; /* Light red for error backgrounds */
  --warning-color: #ffc107;
  --info-color: #17a2b8;
  --info-color-light: #d1ecf1; /* Light cyan for info backgrounds */

  /* New colors inspired các `mc-option`, `tf-option`, `numeric-option` và hiệu ứng hover/selected của chúng.
*   Điều chỉnh lại các nút `btn` chung và `btn-full`.
*   Tối ưu hiển thị hình ảnh (`img`).
*   Đảm bảo các container chính (`#app`, `.quiz-container`, `.dashboard-container`, `.modal-content`) rộng hơn và responsive hơn.

```css
/* public/css by GAS style */
  --gas-blue: #007BFF; /* Primary blue from GAS */
  --gas-blue-dark: #0056b3;
  --gas-gradient-start: #5c6bc0; /* Indigo gradient start for main buttons */
  --gas-gradient-end: #3949ab;   /* Darker Indigo gradient end */
  --gas-green-mc-selected: #/style.css - Phiên bản nâng cấp chuyên gia (Hoàn chỉnh 100%) */

/* --- 1. CSS Custom Properties (Variables) --- */
:root {
  /* Colors */
  --primary-color: #007bff; /* Main brand blue */
  --primary-color-dark: #0056b3;
  --secondary-color: #6c757d; /* Grey4CAF50; /* Green for MC selected */
  --gas-blue-tf-T: #2196F3; /* Blue for TF True */
  --gas-red-tf-F: #F44336; /* Red for TF False */
  --gas-result-start: #f0f9ff; /* Light blue for result gradient */
  --gas-result-end: #e0 for secondary actions */
  --secondary-color-dark: #5a6268;
  --success-color: #28a745;
  --success-color-light: #d4edda; /* Light green for success backgrounds */
  --danger-color: #dc3545;
  --danger-color-light: #f8d7da; /* Light red for error backgrounds */
  --warning-color: #ffc107;
  --info-color: #17a2b8;
  --info-color-light: #d1ecf1; /* Light cyan forf7fa;   /* Lighter blue for result gradient */
  --gas-result-score-color: #00796b; /* Teal for result score */
  --gas-result-text-color: #004d40;  /* Dark teal for result text */
  --gas-highlight-magenta: magenta; /* Magenta for correct answer highlights */
  --gas-question-number-color: #e44d26; /* Orange info backgrounds */

  /* New/Overriding colors inspired by GAS style */
  --gas-blue: #007BFF;
  --gas-blue-dark: #0056b3;
  --gas--red for question number */
  --gas-question-statement-bg: #eef; /* Light blue for question statement background */


  --text-color-dark: #212529; /* Main text color */
  --text-color-medium: #495057; /* Sub-headings, labels */
  --text-color-light: #6c757d; /* Helper text, less important details */
gradient-start: #5c6bc0; /* Indigo */
  --gas-gradient-end: #3949ab;   /* Darker Indigo */
  --gas-green-mc-selected: #4CAF50; /* Green for MC selected */
  --gas-blue-tf-T: #2196F3; /* Blue for TF True */
  --gas-red-tf-F: #  --white: #ffffff;
  --off-white: #f8f9fa; /* Very light grey */
  --background-light: #fafafa; /* Page background, lighter for GAS feel */
  --surface-color: var(--white); /* Card/container background */
  --border-color: #e9ecef; /* Light border */
  --focus-ring-color: rgba(0, 123, 255F44336; /* Red for TF False */
  --gas-result-start: #f0f9ff; /* Light blue for result gradient */
  --gas-result-end: #e0f7fa;   /* Lighter blue for result gradient */
  --gas-result-score: #00796b; /* Teal for result score */
  --gas-result-text: #004d40;  /* Dark teal for result text */
  --gas-highlight-magenta: magenta; /* Magenta for correct answer highlights */
  --gas-question-number-color: #e44d2, 0.3); /* Soft blue outline for focus */

  /* Spacing */
  --spacing-xs: 4px;
  --spacing-sm: 8px;
  --spacing-md: 16px;
  --spacing-lg: 24px;
  --spacing-xl: 32px;
  --spacing-xxl: 48px;

  /* Typography */
  --font-family: 'Be Vietnam Pro', sans-serif;
  --font-size-sm: 0.875rem; /* 14px */
  --font-size-base: 1rem6; /* Orange-red for question number */


  --text-color-dark: #212529; /* Main text color */
  --text-color-medium: #495057; /* Sub-headings, labels */
  --text-color-light: #6c757d; /* Helper text, less important details */
  --white: #ffffff;
  --off-white: #f8f9fa; /* Very light grey */
  --background-light: #fafafa; /* Page background, lighter based on GAS */
  --surface-color: var(--white); /* Card/container background */
  --border;    /* 16px */
  --font-size-lg: 1.125rem;  /* 18px */
  --font-size-xl: 1.5rem;    /* 24px */
  --font-size-xxl: 2rem;     /* 32px */
  --font-size-xxxl: 2.5rem;  /* New for large titles/scores */

  --line-height-base: 1.6;

  /* Borders & Shadows */
  --border-radius-sm: 4px;
  --border-radius-md: 8-color: #e9ecef; /* Light border */
  --focus-ring-color: rgba(92, 107, 192, 0.3); /* Soft Indigo outline for focus */

  /* Spacing */
  --spacing-xs: 4px;
  --spacing-sm: 8px;
  --spacing-md: 16px;
  --spacing-lg: 24px;
  --spacing-xl: 32px;
  --spacing-xxl: 48px;

  /* Typography */
  --font-family: 'Be Vietnam Pro', sans-serif;
  --font-sizepx;
  --border-radius-lg: 12px;
  --border-radius-xl: 16px; /* New: for login container */
  --border-radius-xxl: 20px; /* New: for options, result */

  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.08);
  --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.-sm: 0.875rem; /* 14px */
  --font-size-base: 1rem;    /* 16px */
  --font-size-lg: 1.125rem;  /* 18px */
  --font-size-xl: 1.5rem;    /* 24px */
  --font-size-xxl: 2rem;     /* 32px */
  --line-height-base: 1.6;

  /* Borders & Shadows */
  --border-radius-sm: 4px;
  --border-radius15);
  --shadow-hover: 0 6px 16px rgba(0, 0, 0, 0.12);
  --shadow-gas-light: 0 4px 6px rgba(0, 0, 0, 0.1); /* For buttons */
  --shadow-gas-medium: 0 8px 16px rgba(0,0,0,0.2); /* For containers */
  --shadow-gas-strong: 0 12px 25px rgba(0, 0, 0, 0.15); /* For login container-md: 8px;
  --border-radius-lg: 12px;
  --border-radius-xl: 16px; 
  --border-radius-xxl: 20px; /* For login/main containers */

  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.08);
  --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 8px 24px rgba(0, 0, 0,  */


  /* Transitions */
  --transition-speed-fast: 0.15s;
  --transition-speed-normal: 0.3s;
  --transition-ease: ease-out;
}

/* --- 2. Base & Reset Styles --- */
*, *::before, *::after {
  box-sizing: border-box; /* Standardizes box model */
  margin: 0;
  padding: 0;
}

html {
  scroll-behavior: smooth; /* Smooth scrolling for anchor links */
}

body {
  font-family: var(--font-family);
  background-color0.15);
  --shadow-hover: 0 6px 16px rgba(0, 0, 0, 0.12);
  --shadow-gas-light: 0 4px 6px rgba(0, 0, 0, 0.1); /* For buttons */
  --shadow-gas-medium: 0 8px 16px rgba(0,0,0,0.2); /* For containers */
  --shadow-gas-strong: 0 12px 25px rgba(0, 0, 0, 0.15); /* For login container */


  /* Transitions */
  --transition-speed-fast: 0.15s;
  --transition-speed-normal: 0.3s;
  --transition-ease: ease-: var(--background-light); /* Based on Firebase style */
  color: var(--text-color-dark);
  line-height: var(--line-height-base);
  font-size: var(--font-size-base);
  -webkit-font-smoothing: antialiased; /* Improves font rendering on macOS/iOS */
  -moz-osx-font-smoothing: grayscale; /* Improves font rendering on Firefox */
  display: flex; /* Use flexbox for body to center #app */
  justify-content: center;
  align-items: flex-start; /* Align to start, not center, to allow scrolling if content is long */
  min-height: 100vh; /* Ensure body takes full viewport height */
  padding: var(--spacing-xl) var(--spacing-md); /* Global padding */
}

#app {
  width: out;
}

/* --- 2. Base & Reset Styles --- */
*, *::before, *::after {
  box-sizing: border-box; /* Standardizes box model */
  margin: 0;
  padding: 0;
}

html {
  scroll-behavior: smooth; /* Smooth scrolling for anchor links */
}

body {
  font-family: var(--font-family);
  background-color: var(--background-light); /* Based on GAS's #fafafa */
  color: var(--text-color-dark);
  line-height: var(--line-height-base);
  font-size: var(--95%; /* Giao diện rộng 95% màn hình */
  max-width: 1400px; /* Max width cho toàn bộ ứng dụng, cho phép to, rõ */
  display: flex;
  flex-direction: column;
  align-items: center; /* Center content horizontally within max-width */
  gap: var(--spacing-xl); /* Space between major sections if multiple on screen */
}

/* --- 3. General Components --- */
/* CONTAINER / CARD: Blending Firebase & GAS login container styles */
.container.card { /* Target loginScreen, teacherLogin, result-container */
  max-width: 500px; /* Adjustedfont-size-base);
  -webkit-font-smoothing: antialiased; 
  -moz-osx-font-smoothing: grayscale; 
  display: flex; 
  justify-content: center;
  align-items: flex-start; 
  min-height: 100vh; 
  padding: var(--spacing-xl) var(--spacing-md); 
}

#app {
  width: 100%; width, inspired by GAS */
  width: 100%;
  padding: var(--spacing-xxl) var(--spacing-xl); /* Generous padding */
  text-align: center;
  background-color: var(--surface-color);
  border-radius: var(--border-radius-xl); /* More rounded corners */
  box-shadow: var(--shadow-gas-strong); /* Stronger shadow */
  border: none; /* No border for a cleaner look */
  transition: transform var(--transition-speed-normal) var(--transition-ease), 
              box-shadow var(--transition-speed-normal) var(--transition-ease);
  max-width: 1400px; /* Wider max-width for overall application content, for "to, rõ và đẹp" */
  display: flex;
  flex-direction: column;
  align-items: center; 
  gap: var(--spacing-xl); 
}

/* --- 3. General Components --- */
/* CONTAINER / CARD: Blending Firebase & GAS login container styles */
.container.card { /* Target loginScreen, teacherLogin, result-container */
  max-width: 500px; /* Slightly adjusted width, inspired by GAS */
  width: 100%;
  padding: var(--spacing-xx
}

.container.card:hover { /* Added hover effect from GAS */
  transform: translateY(-5px);
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
}

.card { /* General card style, might be used for dashboard sections */
  background-color: var(--surface-color);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-sm); /* Lighter shadow for nested cards/sections */
  border: 1px solid var(--border-color);
  padding: var(--spacing-lg); /* Default padding for card components */
}

h2 {
  font-size: var(--font-size-xxl); /* Consistent size */
  font-weight: 700;
  l) var(--spacing-xl); 
  text-align: center;
  background-color: var(--surface-color);
  border-radius: var(--border-radius-xxl); /* More rounded corners: 20px */
  box-shadow: var(--shadow-gas-strong); /* Stronger shadow */
  border: none; /* No border for a cleaner look */
  transition: transform var(--transition-speed-normal) var(--transition-ease), 
              box-shadow var(--transition-speed-normal) var(--transition-ease);
}

.container.card:hover { 
  transform: translateY(-5px);
  boxcolor: var(--text-color-dark); /* Darker heading for contrast */
  margin-top: 0;
  margin-bottom: var(--spacing-xl);
  text-align: center;
  /* GAS inspired h2 styling for login/modal */
  text-transform: uppercase;
  letter-spacing: 1.2px;
}

h3 {
  font-size: var(--font-size-xl);
  font-weight: 600;
  color: var(--text-color-dark);
  margin-top: var(--spacing-lg);
  margin-bottom: var(--spacing--shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
}

.card { /* General card style, used for dashboard sections and modals */
  background-color: var(--surface-color);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-sm); 
  border: 1px solid var(--border-color);
  padding: var(--spacing-lg); 
}

h2 {
  font-size: var(--font-size-xxl); 
  font-weight: 700;
  color: var(--text-color-dark); /* Darker heading for contrast */
  margin-top: 0;
  margin-bottom: var(--spacing-xl);
  text-align: center;
  /* GAS inspired h2md);
}

h4 {
  font-size: var(--font-size-lg);
  font-weight: 600;
  color: var(--text-color-medium);
  margin-top: var(--spacing-md);
  margin-bottom: var(--spacing-sm);
}

/* --- Form Elements --- */
.form-group {
  margin-bottom: var(--spacing-lg); /* More space between form groups */
  text-align: left; /* Align labels and inputs to the left */
}

label {
  display: block;
  margin-bottom: var(--spacing-sm);
  font-weight: 600;
  font-size: var(--font-size-base); /* Slightly larger labels */
  color: var(--text-color-medium);
}

input[type=" styling for login/modal */
  text-transform: uppercase;
  letter-spacing: 1.2px;
}

h3 {
  font-size: var(--font-size-xl);
  font-weight: 600;
  color: var(--text-color-dark);
  margin-top: var(--spacing-lg);
  margin-bottom: var(--spacing-md);
}

h4 {
  font-size: var(--font-size-lg);
  font-weight: 600;
  color: var(--text-color-medium);
  margin-top: var(--spacing-md);
  margin-bottom: var(--spacing-sm);
}

/* --- Form Elements --- */
.form-group {
  margin-bottom: var(--spacing-lg); 
  text-align: lefttext"],
input[type="number"],
select,
textarea {
  width: 100%;
  padding: var(--spacing-md); /* More padding for inputs */
  font-size: var(--font-size-base);
  font-family: inherit;
  border: 1px solid #ddd; /* Lighter border inspired by GAS */
  border-radius: var(--border-radius-md); /* Slightly more rounded */
  background-color: var(--white);
  color: var(--text-color-dark);
  transition: border-color var(--transition-speed-fast) var(--transition-ease),
              box-shadow var(--transition-speed-fast) var(--transition-ease);
}

input:focus,
select:focus,
textarea:focus {
  border-color: var(--gas-gradient-start; 
}

label {
  display: block;
  margin-bottom: var(--spacing-sm);
  font-weight: 600;
  font-size: var(--font-size-base); 
  color: var(--text-color-medium);
}

input[type="text"],
input[type="number"],
select,
textarea {
  width: 100%;
  padding: var(--spacing-md); 
  font-size: var(--font-size-base);
  font-family: inherit;
  border: 1px solid #ddd; /* Lighter border inspired by GAS); /* Focus color from GAS start gradient */
  box-shadow: 0 0 10px rgba(92, 107, 192, 0.3); /* Stronger focus shadow */
  outline: none; /* Remove default browser outline */
}

textarea {
  resize: vertical; /* Allow vertical resizing */
  min-height: 100px;
}

.form-group small {
  display: block;
  margin-top: var(--spacing-sm);
  font-size: var(--font-size-sm);
  color: var(--text-color-light);
}

.form-link {
  font-size: var(--font-size-sm);
  margin-top: var(--spacing-lg);
  text-align: center;
}

.form-link a {
  color */
  border-radius: var(--border-radius-md); /* Slightly more rounded */
  background-color: var(--white);
  color: var(--text-color-dark);
  transition: border-color var(--transition-speed-fast) var(--transition-ease),
              box-shadow var(--transition-speed-fast) var(--transition-ease);
}

input:focus,
select:focus,
textarea:focus {
  border-color: var(--gas-gradient-start); 
  box-shadow: 0 0 10px var(--focus-ring-color); /* Stronger focus shadow from GAS */
  outline: none; 
}

textarea {
  resize: vertical; 
  min-height: 100px;
}

.form-group small {
  display: block;
  margin-top: var(--spacing: var(--primary-color);
  text-decoration: none;
  font-weight: 600;
  transition: color var(--transition-speed-fast) var(--transition-ease),
              text-decoration var(--transition-speed-fast) var(--transition-ease);
}

.form-link a:hover {
  text-decoration: underline;
  color: var(--primary-color-dark);
}


/* --- 4. Buttons --- */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-md) var(--spacing-lg); /* More padding */
  font-size: var(--font-size-base);
  font-weight: 600;
  border: none;
  border-sm);
  font-size: var(--font-size-sm);
  color: var(--text-color-light);
}

.form-link {
  font-size: var(--font-size-sm);
  margin-top: var(--spacing-lg);
  text-align: center;
}

.form-link a {
  color: var(--primary-color);
  text-decoration: none;
  font-weight: 600;
  transition: color var(--transition-speed-fast) var(--transition-ease),
              text-decoration var(--transition-speed-fast) var(--transition-ease);
}

.form-link a:hover {
  text-decoration: underline;
  color: var(--primary-color-dark);
}


/* --- 4. Buttons --- */
.btn-radius: var(--border-radius-md); /* Consistent rounding */
  cursor: pointer;
  text-decoration: none;
  line-height: 1.5;
  transition: all var(--transition-speed-normal) var(--transition-ease); /* Slower transition for smoothness */
  box-shadow: var(--shadow-gas-light); /* Subtle shadow from GAS */
}

.btn:hover {
  transform: translateY(-2px); /* Slight lift effect */
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); /* Stronger shadow on hover */
}

.btn:active {
  transform: translateY(0); /* Press down effect */
  box-shadow: var(--shadow-gas-light); /* Return to base shadow */
}

.btn- {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-md) var(--spacing-lg); 
  font-size: var(--font-size-base);
  font-weight: 600;
  border: none;
  border-radius: var(--border-radius-md); /* Consistent rounding */
  cursor: pointer;
  text-decoration: none;
  line-height: 1.5;
  transition: all var(--transition-speed-normal) var(--transition-ease); 
  box-shadow: var(--shadow-gas-light); 
}

.btn:hover {
  transform: translateY(-2px); 
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); 
}

.btn:active {
  transform: translateY(0);
  box-shadow: var(--shadow-gas-light); 
}

.full {
  width: 100%;
  margin-top: var(--spacing-xl); /* More space for full-width buttons like Start/Grade */
  padding: var(--spacing-lg); /* Larger padding for main buttons */
  font-size: var(--font-size-lg); /* Larger font for main buttons */
}

/* Button variants */
.btn-primary { background-color: var(--primary-color); color: var(--white); }
.btn-primary:hover { background-color: var(--primary-color-dark); }

/* Special styling for the main "Start Exam" button (inspired by GAS) */
#loginScreen .btn-primary, #gradeBtn.btn-success.btn-full { /* Apply also to gradeBtn for consistency */
  background: linear-gradient(45deg, var(--gas-gradient-start), var(--gas-gradient-end));
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
}
#loginScreen .btn-primary:btn-full {
  width: 100%;
  margin-top: var(--spacing-xl); 
  padding: var(--spacing-lg); 
  font-size: var(--font-size-lg); 
}

/* Button variants */
.btn-primary { background-color: var(--primary-color); color: var(--white); }
.btn-primary:hover { background-color: var(--primary-color-dark); }

/* Special styling for the main "Start Exam" button (inspired by GAS) */
#loginScreen .btn-primary, .btn-primary.btn-full {
  background: linear-gradient(45deg, var(--gas-gradient-start), var(--gas-gradient-end));
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
}
#loginScreen .btn-primary:hover, .btn-primary.btn-full:hover {
  background: linear-gradient(45deg, var(--gas-gradient-end), varhover, #gradeBtn.btn-success.btn-full:hover {
  background: linear-gradient(45deg, var(--gas-gradient-end), var(--gas-gradient-start)); /* Invert gradient on hover */
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.btn-secondary { background-color: var(--secondary-color); color: var(--white); }
.btn-secondary:hover { background-color: var(--secondary-color-dark); }

.btn-danger { background-color: var(--danger-color); color: var(--white); }
.btn-danger:hover { background-color: #c82333; } /* Slightly darker red */

.btn-success { /* For Grade & Submit button, overridden by specific gradient for #gradeBtn */
  background-color: var(--success-color);
  color: var(--white);
}
.btn-success:hover { background-color: #218838; } /* Slightly darker green */

.btn(--gas-gradient-start)); 
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.btn-secondary { background-color: var(--secondary-color); color: var(--white); }
.btn-secondary:hover { background-color: var(--secondary-color-dark); }

.btn-danger { background-color: var(--danger-color); color: var(--white); }
.btn-danger:hover { background-color: #c82333; } 

.btn-success { 
  background-color: var(--success--google { background-color: #4285F4; color: var(--white); } /* Specific Google Blue */
.btn-google:hover { background-color: #357ae8; }

/* --- 5. Specific Screen Styles --- */

/* Login Screens & Teacher Info */
#teacherLogin, #loginScreen {
  display: flex; /* Overridden by JS, but good default */
  flex-direction: column;
  gap: var(--spacing-lg); /* Consistent spacing between major elements */
}

#teacherInfo {
  margin: var(--spacing-md) 0;
  padding: var(--spacing-md);
  font-size: var(--font-size-sm);
  background-color: var(--info-color-light); /* Light blue background */
  border: 1px solid var(--info-colorcolor);
  color: var(--white);
}
.btn-success:hover { background-color: #218838; } 

.btn-google { background-color: #4285F4; color: var(--white); } 
.btn-google:hover { background-color: #357ae8; }

/* --- 5. Specific Screen Styles --- */

/* Login Screens & Teacher Info */
#teacherLogin, #loginScreen {
  display: flex; 
  flex-direction: column;
  gap: var(--spacing-lg); 
}

#teacherInfo {
  margin: var(--spacing-md) 0;
  padding: var(--spacing-md);
  font-size: var(--font-size-sm);
  background-color: var(--info-color-light); 
  border: 1px solid var(--info-color);
  color: #004085; 
  border-radius: var(--border-radius-md);
  text-align: left;
}
#teacherInfo p { margin-bottom: var(--spacing-sm); }
#teacherInfo p:last-child { margin-bottom: 0; }


/* Loading Spinner Overlay */
.loading-);
  color: #004085; /* Darker text for info box */
  border-radius: var(--border-radius-md);
  text-align: left;
}
#teacherInfo p { margin-bottom: var(--spacing-sm); }
#teacherInfo p:last-child { margin-bottom: 0; }


/* Loading Spinner Overlay */
.loading-overlay {
  position: fixed;
  top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(255, 255, 255, 0.9); /* More opaque white */
  display: flex; flex-direction: column; justify-content: center; align-items: center;
  z-index: 9999; /* Highest z-index to cover everything */
  backdrop-filter: blur(8px); /* Stronger blur for modern effect */
  -webkit-backdrop-filter: blur(8px); /* For Safari */
  overlay {
  position: fixed;
  top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(255, 255, 255, 0.9); 
  display: flex; flex-direction: column; justify-content: center; align-items: center;
  z-index: 9999; 
  backdrop-filter: blur(8px); 
  -webkit-backdrop-filter: blur(8px); 
  transition: opacity var(--transition-speed-normal) var(--transition-ease);
}

.spinner {
  width: 60px; height: 60px; 
  border: 6px solid rgba(0, 123, 255, 0.2); 
  border-top-color: var(--primary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.loading-overlay p {
  transition: opacity var(--transition-speed-normal) var(--transition-ease);
}

.spinner {
  width: 60px; height: 60px; /* Slightly larger spinner */
  border: 6px solid rgba(0, 123, 255, 0.2); /* Thicker, softer border */
  border-top-color: var(--primary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.loading-overlay p {
  margin-top: var(--spacing-lg);
  font-weight: 500;
  color: var(--primary-color);
  font-size: var(--font-size-lg);
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Quiz & Timer Display */
.timer-container {
  position: sticky; /* Sticky, so it scrolls with the content but stays in view */
  top: 0; /* Stays at the very top ofmargin-top: var(--spacing-lg);
  font-weight: 500;
  color: var(--primary-color);
  font-size: var(--font-size-lg);
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Quiz & Timer Display */
.timer-container {
  position: sticky; 
  top: 0; 
  width: 100%;
  max-width: 900px; /* Slightly wider to match quiz container */
  background-color: rgba(255, 255, 255, 0.98); 
  padding: var(--spacing-md) var(--spacing-xl);
  text-align: center;
  z-index: 100; 
  box-shadow: var(--shadow-sm); 
  backdrop-filter: blur(5px);
  -webkit-backdrop-filter: blur(5px);
  border-bottom-left-radius: var(--border-radius-md the viewport */
  width: 100%;
  max-width: 100%; /* Fill 100% of parent width (#app's 95% width) */
  background-color: rgba(255, 255, 255, 0.98); /* Near opaque for readability */
  padding: var(--spacing-md) var(--spacing-xl);
  text-align: center;
  z-index: 100; /* Above regular content, below modals */
  box-shadow: var(--shadow-sm); /* Subtle shadow to lift it */
  backdrop-filter: blur(5px);
  -webkit-backdrop-filter: blur(5px);
  border-bottom-left-radius: var(--border-radius-md); /* Rounded bottom corners */
  border-); 
  border-bottom-right-radius: var(--border-radius-md);
  margin-bottom: var(--spacing-lg); 
}

#timer {
  font-size: var(--font-size-lg);
  font-weight: 700;
  color: var(--danger-color);
  letter-spacing: 0.5px; 
}

.quiz-container {
  max-width: 900px; /* Wider quiz container for "to, rõ và đẹp" */
  width: 100%;
  margin: 0 auto; 
  padding: var(--spacing-xl);
  background-color: var(--surface-color);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-md);
}

.question {
  margin-bottom-right-radius: var(--border-radius-md);
  margin-bottom: var(--spacing-lg); /* Space between timer and quiz */
}

#timer {
  font-size: var(--font-size-lg);
  font-weight: 700;
  color: var(--danger-color);
  letter-spacing: 0.5px; /* Slightly more spaced letters */
}

.quiz-container {
  width: 100%; /* Fill 100% of parent width (#app's 95% width) */
  max-width: 100%; /* Max width controlled by #app */
  margin: 0 auto; /* Center the quiz container */
  padding: var(--spacing-xl);
  background-color: var(--surface-color);
  border-radius: var(--border-radius-bottom: var(--spacing-xxl); 
  padding: var(--spacing-lg); /* Added padding inside question box */
  border: 1px solid #ddd; /* Border from GAS */
  border-radius: var(--border-radius-lg); /* More rounded corners */
  background-color: var(--white); /* White background from GAS */
  box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Subtle shadow from GAS */
  position: relative;
}

.question:last-child {
  border-bottom: none; 
  margin-bottom: 0;
}

.question-number { /* Specific styling for "Câu X" number */
    color: var(--gas-question-number-color);
    font-size: 22px; 
    font-weight: bold;
    text-shadow:md);
  box-shadow: var(--shadow-md);
}

.question {
  margin-bottom: var(--spacing-xxl); /* More space between questions */
  padding: var(--spacing-lg); /* Added padding inside question box */
  border: 1px solid #ddd; /* Border from GAS */
  border-radius: var(--border-radius-lg); /* More rounded corners */
  background-color: var(--white); /* White background from GAS */
  box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Subtle shadow from GAS */
  position: relative;
}

.question:last-child {
  border-bottom: none; /* No need if border is on box */
  margin-bottom: 0;
}

.question p:first-child { /* 1px 1px 2px rgba(0,0,0,0.3);
    text-align: center;
    margin-bottom: var(--spacing-md);
}

.question-statement {
  font-size: var(--font-size-lg);
  line-height: 1.7;
  margin-bottom: var(--spacing-md);
  color: var(--text-color-dark);
  background-color: #eef; /* Specific light blue from GAS */
  padding: var(--spacing-md);
  border-radius: var(--border-radius-md); /* More rounded */
  border: 1px dashed #999; /* Dashed border from GAS */
  box-shadow: inset 0 2px 4px rgba(0,0,0,0.05); /* Subtle inner Styling for "Câu X" number (inspired by GAS inline style) */
    color: var(--gas-question-number-color);
    font-size: 22px; /* From GAS */
    font-weight: bold;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
    text-align: center;
    margin-bottom: var(--spacing-md);
}

.question-statement {
  font-size: var(--font-size-lg);
  line-height: 1.7;
  margin-bottom: var(--spacing-md);
  color: var(--text-color-dark);
  background-color: var(--gas-question-statement-bg); /* Specific light blue from GAS */
  padding: var(--spacing-md);
  border-radius: shadow */
}

/* KaTeX rendering adjustments */
.question-statement .katex-display {
    margin: 1em 0 !important; 
    padding: 0;
}
.katex {
    font-size: 1.1em; 
}

/* Image sizing within question/explanation */
.question-statement img,
.explanation img {
  max-width: 100%; /* Ensure images don't overflow */
  height: auto; /* Maintain aspect ratio */
  display: block; /* Center images */
  margin: var(--spacing-md) auto; 
  border-radius: var(-- var(--border-radius-md); /* More rounded */
  border: 1px dashed #999; /* Dashed border from GAS */
  box-shadow: inset 0 1px 3px rgba(0,0,0,0.05); /* Inner shadow for depth */
}

/* Image sizing within question/explanation to be contained and clear */
.question-statement img,
.explanation img {
  max-width: 100%; /* Ensures image fits within its container */
  height: auto; /* Maintains aspect ratio */
  display: block; /* Centers block images */
  margin: var(--spacing-md) auto; /* Center images */border-radius-sm);
  box-shadow: var(--shadow-sm);
  object-fit: contain; /* Ensure entire image is visible within its bounds */
}


/* Multiple Choice & True/False Options */
.mc-options, .tf-options {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-md); 
  margin-top: var(--spacing-md);
  justify-content: center; 
}

.mc-option, .tf-box { /* tf-box is the container for T/F buttons */
  width: 150px; /* Fixed width from GAS */

  border-radius: var(--border-radius-sm);
  box-shadow: var(--shadow-sm);
  object-fit: contain; /* Ensures the whole image is visible within its bounds */
}

/* KaTeX rendering adjustments */
.question-statement .katex-display {
    margin: 1em 0 !important; /* Ensure KaTeX display math has proper vertical spacing */
    padding: 0;
}
.katex {
    font-size: 1.1em; /* Slightly larger math font */
}


/* Multiple Choice & True/False Options */
.mc-options, .tf-options {
  display  height: 60px; /* Fixed height from GAS */
  border: 2px solid #ccc; /* Border from GAS */
  border-radius: var(--border-radius-lg); /* More rounded for options */
  background-color: #f5f5f5; /* Background from GAS */
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 20px; 
  font-weight: bold;
  color: #555;
  cursor: pointer;
  transition: transform var(--transition-speed-normal) var(--transition-ease), 
              border-: flex;
  flex-wrap: wrap;
  gap: var(--spacing-md); /* More gap for options */
  margin-top: var(--spacing-md);
  justify-content: center; /* Center options */
}

.mc-option, .tf-box { /* tf-box is the container for T/F buttons */
  width: 150px; /* Fixed width from GAS */
  height: 60px; /* Fixed height from GAS */
  border: 2px solid #ccc; /* Border from GAS */
  border-radius: var(--border-radius-lg); /* More rounded for options */
  background-colorcolor var(--transition-speed-normal) var(--transition-ease),
              background-color var(--transition-speed-normal) var(--transition-ease); 
  user-select: none;
  position: relative;
}

.mc-option:hover, .tf-box:hover, .numeric-option:hover { 
  transform: scale(1.05);
  border-color: #999;: #f5f5f5; /* Background from GAS */
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 20px; /* Larger font from GAS */
  font-weight: bold;
  color: #555;
  cursor: pointer;
  transition: transform var(--transition-speed-normal) var(--transition-ease), 
              border-color var(--transition-speed-normal) var(--transition-ease),
              background-color var(--transition-speed-normal) var(--transition-ease); /* Added background-color transition */
  user
}

.mc-option.selected { 
  background-color: var(--gas-green-mc-selected);
  color: var(--white);
  border-color: var(--gas-green-mc-selected);
  box-shadow: 0 0 10px rgba(76,175,80,0.6);
}

/* True/False specific button styling (inside tf-box) */
.tf-btn { /* Styles applied to T or F button part */
  flex: 1; /* Each T/F button takes half width */
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 20px;
  font-weight: bold;
  cursor: pointer;
  transition: transform var(--transition-speed-normal) var(--transition-ease-select: none;
  position: relative;
}

.mc-option:hover, .tf-box:hover, .numeric-option:hover { /* Hover effects from GAS */
  transform: scale(1.05);
  border-color: #999;
}

.mc-option.selected { /* Selected styling from GAS */
  background-color: var(--gas-green-mc-selected);
  color: var(--white);
  border-color: var(--gas-green-mc-selected);
  box-shadow: 0 0 10px rgba(76,175,80,0.6);
}

/* True/False specific button styling (inside tf-box) */
.tf-btn { /* Styles applied to T or F button part */
  flex: 1; /* Each T), 
              background-color var(--transition-speed-normal) var(--transition-ease);
}
.tf-btn[data-value="T"] { /* Added to facilitate highlight logic in JS */
    /* specific T styling if needed */
}
.tf-btn[data-value="F"] { /* Added to facilitate highlight logic in JS */
    /* specific F styling if needed */
}

.tf-btn.selected.T { 
  background-color: var(--gas-blue-tf-T);
  color: var(--white);
  box-shadow: none; 
}
.tf-btn.selected.F { 
  background-/F button takes half width */
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 20px;
  font-weight: bold;
  cursor: pointer;
  transition: transform var(--transition-speed-normal) var(--transition-ease), 
              background-color var(--transition-speed-normal) var(--transition-ease);
}
.tf-btn input { display: none; } /* Hide radio inputs inside tf-btn */

.tf-btn.selected.T { /* Selected True from GAS */
  background-color: var(--gas-blue-tfcolor: var(--gas-red-tf-F);
  color: var(--white);
  box-shadow: none; 
}

.tf-box input { display: none; } 


/* Numeric option */
.numeric-option {
  width: 200px; 
  height: 60px;
  border: 2px solid #ccc;
  border-radius: var(--border-radius-lg);
  background-color: #f5f5f5;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: var(--spacing-md) auto 0-T);
  color: var(--white);
  box-shadow: none; /* Remove duplicate shadow from parent selected */
}
.tf-btn.selected.F { /* Selected False from GAS */
  background-color: var(--gas-red-tf-F);
  color: var(--white);
  box-shadow: none; /* Remove duplicate shadow from parent selected */
}


/* Numeric option */
.numeric-option {
  width: 200px; /* Wider for input, adjusted from GAS 150px */
  height: 60px;
  border: 2px solid #ccc;
  border-radius:; 
  position: relative;
}
.numeric-option input[type="text"] { 
  width: 90%;
  height: 80%;
  text-align: center;
  font-size: 20px;
  border: none;
  background: transparent;
  outline: none;
  color: var(--text-color-dark);
  font-family: inherit;
  font-weight: bold; 
}


/* Correct/Incorrect Answer Feedback (Post-grading) */
/* Shared highlight for correct answer in options */
.correct-answer-highlight { 
  border-color: var(--border-radius-lg);
  background-color: #f5f5f5;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: var(--spacing-md) auto 0; /* Center and margin top */
  position: relative;
}
.numeric-option input[type="text"] { /* Styling for the actual text input */
  width: 90%;
  height: 80%;
  text-align: center;
  font-size: 20px;
  border: none;
  background: transparent;
  outline: none;
   var(--gas-highlight-magenta) !important;
  box-shadow: 0 0 10px rgba(255, 0, 255, 0.6) !important; /* Magenta glow */
}

/* Highlight for user's selected but incorrect answer */
.incorrect-answer-highlight {
    background-color: var(--danger-color-light) !important;
    border-color: var(--color: var(--text-color-dark);
  font-family: inherit;
  font-weight: bold; /* Make input text bold */
}


/* Correct Answer Feedback (Post-grading) */
.correct-answer { /* For MC options and TF buttons that are correct */
  border-color: var(--gas-highlight-magenta) !important;
  box-shadow: 0 0 10px rgba(255danger-color) !important;
    box-shadow: 0 0 5px rgba(220, 53, 69, 0.4) !important;
    color: var(--text-color-dark) !important; /* Keep text readable */
}

.tf-btn.correct-answer-highlight { 
  border: 3px solid var(--gas-highlight-magenta);
  transform: scale(1.1);, 0, 255, 0.6); /* Magenta glow */
}
.tf-btn.correct-answer { /* Specific highlight for TF buttons */
  border: 3px solid var(--gas-highlight-magenta);
  box-shadow: 0 0 10px rgba(255, 0, 255, 0.6);
  transform: scale(1.1); /* Slightly larger */
}
.numeric-option.correct { /* For numeric input that is correct */
  border-color: var(--gas-highlight-magenta);
  box-shadow: 0 0 10px rgba 
}

/* Display for correct answer value */
.correct-answer-value { /* For "Đáp án: X" text, specific to numeric/TF post-grading */
  font-size: var(--font-size-sm);
  font-weight: bold;
  color: var(--gas-highlight-magenta);
  position: absolute; 
  bottom: 5px;
  left: 50%;
  (255, 0, 255, 0.6);
}

.correct-answer-display { /* For "Đáp án: X" text */
  font-size: var(--font-size-sm);
  font-weight: bold;
  color: var(--gas-highlight-magenta);
  /* Position absolute only if parent is relative, otherwise it might float */
  /* Remove position absolute, lettransform: translateX(-50%);
  white-space: nowrap;
}

.tf-grade { /* For TF score display below options (if implemented) */
  margin-top: var(--spacing-sm);
  text-align: center;
  font-size: var(--font-size-base);
  font-weight: bold;
  color: var(--text-color-dark);
}


/* Explanation Toggle & Content */
.toggle-explanation {
  display: block; 
  margin: var(--spacing-md) auto; 
  background-color: var(--gas-blue); 
  color: var(--white);
   it flow naturally or use flexbox for better control */
  display: block; /* Ensure it takes its own line */
  text-align: center;
  margin-top: var(--spacing-xs); /* Small margin from previous content */
}

.tf-grade { /* For TF score display below options */
  margin-top: var(--spacing-sm);
  text-align: center;
  font-size: var(--font-padding: var(--spacing-sm) var(--spacing-lg);
  font-size: var(--font-size-base);
  border-radius: var(--border-radius-md);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
.toggle-explanation:hover {
  background-color: var(--gas-blue-dark);
  transform: translateY(-2size-base);
  font-weight: bold;
  color: var(--text-color-dark);
}


/* Explanation Toggle & Content */
.toggle-explanation {
  display: block; /* Ensure it's a block element */
  margin: var(--spacing-md) auto; /* Center the button */
  background-color: var(--gas-blue); /* Blue button from GAS */
  color: var(--whitepx);
}
.explanation {
  margin-top: var(--spacing-md);
  padding: var(--spacing-lg); 
  border: 1px solid #ccc; 
  border-radius: var(--border-radius-lg); 
  background-color: #f9f9f9; 
  font-size: var(--font-size-base);
  color: #555;);
  padding: var(--spacing-sm) var(--spacing-lg);
  font-size: var(--font-size-base);
  border-radius: var(--border-radius-md);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
.toggle-explanation:hover {
  background-color: var(--gas-blue-dark);
  transform: translateY(-2px);
}
.explanation {
  margin-top: var(--spacing-md);
  padding: var(--spacing-lg); /* More padding */
  border: 1px solid #ccc
  line-height: 1.6;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  transition: background-color var(--transition-speed-normal) var(--transition-ease);
}
.explanation:hover { background-color: #f0f0f0; } 
.explanation.hidden { display: none; } 


/* Grade & Submit Button (#gradeBtn) */
#gradeBtn {
  display: block; 
  margin: var(--spacing-xxl) auto; 
  padding: var(--spacing-lg) var(--spacing-xl); 
  font-size: var(--font-size-lg); 
  font-weight: bold;
  color: var(--white);
  background-color: var(--success-color); 
  ; /* Border from GAS */
  border-radius: var(--border-radius-lg); /* More rounded */
  background-color: #f9f9f9; /* Background from GAS */
  font-size: var(--font-size-base);
  color: #555;
  line-height: 1.6;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  transition: background-color var(--transition-speed-normal) var(--transition-ease);
}
.explanation:hover { background-color: #f0f0f0; } /* Hover effect from GAS */
.explanation.hidden { display: none; } /* Hide by default */


/* Grade & Submit Button (#gradeBtn) */
#gradeBtn {
  display: block; /* Overwrittenborder: none;
  border-radius: var(--border-radius-md);
  cursor: pointer;
  transition: background-color var(--transition-speed-normal) var(--transition-ease), 
              transform var(--transition-speed-normal) var(--transition-ease),
              box-shadow var(--transition-speed-normal) var(--transition-ease);
  box-shadow: var(--shadow-gas-light);
}
#gradeBtn:hover {
  background-color: #218838;
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}
#gradeBtn i { margin-right: var(--spacing-sm); }


/* Result Container (#result-container) */
#result-container {
  max- by JS, but good default */
  margin: var(--spacing-xxl) auto; /* Large margin top to separate from quiz */
  padding: var(--spacing-lg) var(--spacing-xl); /* Larger padding */
  font-size: var(--font-size-lg); /* Larger font */
  font-weight: bold;
  color: var(--white);
  /* Background set by .btn-full and #loginScreen .btn-primary */
  border: none;
  border-radius: var(--border-radius-md);
  cursor: pointer;
  transition: background-color var(--transition-speed-normal) var(--width: 600px; 
  margin: var(--spacing-xxl) auto;
  background: linear-gradient(135deg, var(--gas-result-start), var(--gas-result-end)); 
  border-radius: var(--border-radius-xl); 
  box-shadow: 0 8px 16px rgba(0,0,0,0.15); 
  padding: var(--spacing-xxl); 
  text-align: center;
}
#result-container h2 {
  color: var(--gas-result-score); 
  margin-bottom: var(--spacing-transition-ease), 
              transform var(--transition-speed-normal) var(--transition-ease),
              box-shadow var(--transition-speed-normal) var(--transition-ease);
  box-shadow: var(--shadow-gas-light);
}
/* Already inheriting from #loginScreen .btn-primary for specific styling */


/* Result Container (#result-container) */
#result-container {
  max-width: 600px; /* Wider for result display */
  margin: var(--spacing-xxl) auto;
  background: linear-gradient(135deg, var(--gas-result-start), var(--gas-resultlg);
  font-size: var(--font-size-xxl);
}
#result-container p {
  font-size: var(--font-size-lg);
  color: var(--gas-result-text); 
  margin: var(--spacing-sm) 0;
}
#result-container p strong { color: var(--text-color-dark); } 
#result-container .btn-primary { 
  margin-top: var(--spacing-xl);
  padding: var(--spacing-md) var(--spacing-lg);
  font-size: var(--font-size-base);
  background: var(--gas-blue); 
}-end)); /* Gradient from GAS */
  border-radius: var(--border-radius-xl); /* Larger radius */
  box-shadow: 0 8px 16px rgba(0,0,0,0.15); /* Stronger shadow */
  padding: var(--spacing-xxl); /* Generous padding */
  text-align: center;
}
#result-container h2 {
  color: var(--gas-result-score-color); /* Teal color for heading */
  margin-bottom: var(--spacing-lg);
  font-size: var(--font-size-xxxl); /* Larger size for main result heading */
  text-
#result-container .btn-primary:hover {
  background: var(--gas-blue-dark);
}

/* --- 6. Teacher Dashboard Styles --- */
.dashboard-container {
  width: 100%;
  max-width: 1200px; /* Wider for dashboard content */
  padding: var(--spacing-xl);
  background-color: var(--surface-color);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-md);
}

.dashboard-container h2 {
  margin-bottom: var(--spacing-lg);
  color: var(--primary-color);
  text-transform: none; /* Override uppercase for dashboard h2 */
  letter-spacing: normal;
}

.dashboard-container p {
  font-size: var(--transform: none; /* Override uppercase */
  letter-spacing: normal;
}
#result-container p {
  font-size: var(--font-size-lg);
  color: var(--gas-result-text-color); /* Dark teal text */
  margin: var(--spacing-sm) 0;
}
#result-container p strong { color: var(--text-color-dark); } /* Stronger text for labels */
#result-container .score { /* Score text styling */
  font-size: var(--font-size-xxxl); /* Larger size for final score */
  font-weight: bold;
  color: var(--gas-result-score-color);
  margin-top: var(--spacing-md);
}
#result-container .btn-primary { /* Button inside result container */
  margin-top: var(--spacing-xl);font-size-lg);
  margin-bottom: var(--spacing-sm);
  color: var(--text-color-medium);
}

.dashboard-sections {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Flexible columns */
  gap: var(--spacing-xl);
  margin-top: var(--spacing-xxl);
}

.dashboard-section {
  background-color: var(--surface-color);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-sm); 
  border: 1px solid var(--border-color);
  padding: var(--spacing-lg);
  
  display: flex;
  flex-direction: column; 
}

.dashboard-section h3 {
  
  padding: var(--spacing-md) var(--spacing-lg);
  font-size: var(--font-size-base);
  background: var(--gas-blue); /* Blue button from GAS */
}
#result-container .btn-primary:hover {
  background: var(--gas-blue-dark);
}

/* --- 6. Teacher Dashboard Styles --- */
.dashboard-container {
  width: 100%;
  max-width: 1200px; /* Wider for dashboard content */
  padding: var(--spacing-xl);
  background-color: var(--surface-color);
  bordertext-align: center;
  color: var(--primary-color);
  margin-top: 0;
  margin-bottom: var(--spacing-lg);
  padding-bottom: var(--spacing-sm);
  border-bottom: 2px solid var(--primary-color);
  font-size: var(--font-size-lg);
}

.dashboard-section .btn {
  width: 100%;
  margin-bottom: var(--spacing-lg);
}

.list-group {
  max-height: 450px; 
  overflow-y: auto;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius-md);
  background-color: var(--off-white); 
  flex-grow: 1; 
}

.list-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-md) var(--spacing-lg);
  -radius: var(--border-radius-md);
  box-shadow: var(--shadow-md);
}

.dashboard-container h2 {
  margin-bottom: var(--spacing-lg);
  color: var(--primary-color);
  text-transform: none; /* Override uppercase for dashboard h2 */
  letter-spacing: normal;
}

.dashboard-container p {
  font-size: var(--font-size-lg);
  margin-bottom: var(--spacing-sm);
  color: var(--text-color-medium);
}

.dashboard-sections {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Flexible columns */
  gap: var(--spacing-xl);
  margin-top: var(--spacing-xxl);
}

.dashboard-section {
  background-color: var(--surface-color);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-sm); 
  border: 1px solid var(--border-color);
  padding: var(--spacing-lg);
  
  display: flex;
  flex-direction: column; /* Ensure content stacks vertically */
}

.border-bottom: 1px solid var(--border-color);
  transition: background-color var(--transition-speed-fast) var(--transition-ease),
              box-shadow var(--transition-speed-fast) var(--transition-ease);
}

.list-item:last-child {
  border-bottom: none;
}

.list-item:hover {
  background-color: #e9f5ff; 
  box-shadow: var(--shadow-sm); 
}

.list-item-content {
  flex-grow: 1;
  margin-right: var(--spacing-md);
  overflow: hidden; 
}

.list-item-title {
  font-weight: 600;
  color: var(--text-color-dark);
  font-size: var(--font-size-base);
  white-space: nowrap; 
  overflow: hidden;
  text-overflow: ellipsis; 
}

.list-item-details {
  font-size: var(--font-size-dashboard-section h3 {
  text-align: center;
  color: var(--primary-color);
  margin-top: 0;
  margin-bottom: var(--spacing-lg);
  padding-bottom: var(--spacing-sm);
  border-bottom: 2px solid var(--primary-color);
  font-size: var(--font-size-lg);
}

.dashboard-section .btn {
  width: 100%;
  margin-bottom: var(--spacing-lg);
}

.list-group {
  max-height: 450px; /* Slightly taller for more items */
  overflow-y: auto;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius-md);
  background-color: var(--off-white); /* Light background for list group */
  flex-grow: 1; /* Allow list to grow and fill space */
}

.list-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-md) var(--spacing-lg);
  border-bottom: 1px solid var(--border-color);
  transition: background-sm);
  color: var(--text-color-light);
  margin-top: var(--spacing-xs);
}

.list-item-actions {
  display: flex;
  gap: var(--spacing-sm);
}

.list-item-actions button {
  background: none;
  border: none;
  cursor: pointer;
  font-size: var(--font-size-lg); 
  color: var(--text-color-light); 
  transition: color var(--transition-speed-fast) var(--transition-ease),
              background-color var(--transition-speed-fast) var(--transition-ease),
              transform var(--transition-speed-fast) var(--transition-ease);
  padding: var(--spacing-sm);
  border-radius: 50%; 
}

.list-item-actions button:hover {
  transform: translateY(-1px);
  background-color: var(--off-white);
}

.list-item-actions .edit-btn:hover {
  color: var(--primary-color);
  background-color: rgba(0, 123, 255, 0.1); 
}

.list-item-actions button:last-child:hover {color var(--transition-speed-fast) var(--transition-ease),
              box-shadow var(--transition-speed-fast) var(--transition-ease);
}

.list-item:last-child {
  border-bottom: none;
}

.list-item:hover {
  background-color: #e9f5ff; /* Light blue on hover */
  box-shadow: var(--shadow-sm); /* Subtle lift on hover */
}

.list-item-content {
  flex-grow: 1;
  margin-right: var(--spacing-md);
  overflow: hidden; /* For text truncation */
}

.list-item-title {
  font-weight: 600;
  color: var(--text-color-dark);
  font-size: var(--font-size-base);
  white-space: nowrap; /* Prevent title wrapping */
  overflow: hidden;
  text-overflow: ellipsis; /* Add ellipsis for overflow */
}

.list-item-details {
  font-size: var(-- 
  color: var(--danger-color);
  background-color: rgba(220, 53, 69, 0.1); 
}

.dashboard-actions {
  display: flex;
  justify-content: flex-end; 
  gap: var(--spacing-md);
  margin-top: var(--spacing-xl);
  padding-top: var(--spacing-lg);
  border-top: 1px solid var(--border-color);
}

/* --- 7. Modals (Exam Form, Class Form) --- */
.modal-backdrop {
  position: fixed;
  top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0,0,0,0.6); 
  z-index: 1500; 
  display: flex; justify-content: center; align-items: center;
  padding: var(--spacing-md);
  backdrop-filter: blur(10px); 
  font-size-sm);
  color: var(--text-color-light);
  margin-top: var(--spacing-xs);
}

.list-item-actions {
  display: flex;
  gap: var(--spacing-sm);
}

.list-item-actions button {
  background: none;
  border: none;
  cursor: pointer;
  font-size: var(--font-size-lg); /* Larger icons */
  color: var(--text-color-light); /* Default icon color */
  transition: color var(--transition-speed-fast) var(--transition-ease),
              background-color var(--transition-speed-fast) var(--transition-ease),
              transform var(--transition-speed-fast) var(--transition-ease);
  padding: var(--spacing-sm);
  border-radius: 50%; /* Make them circular */
}

.list-item-actions button:hover {
  transform: translateY(-1px);
  background-color: var(--off-white);
}

.list--webkit-backdrop-filter: blur(10px);
  animation: fadeIn var(--transition-speed-normal) var(--transition-ease);
}

.modal-content {
  background-color: var(--surface-color);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-md);
  border: 1px solid var(--border-color);
  
  width: 100%;
  max-width: 800px; 
  max-height: 95vh; 
  
  display: flex; 
  flex-direction: column; 
  
  padding: var(--spacing-xl); 
  animation: slideIn var(--transition-speed-normal) var(--transition-ease);
}

.modal-content h2 {
  margin-bottom: var(--spacing-item-actions .edit-btn:hover {
  color: var(--primary-color);
  background-color: rgba(0, 123, 255, 0.1); /* Light blue background for edit */
}

.list-item-actions button:last-child:hover { /* Delete button */
  color: var(--danger-color);
  background-color: rgba(220, 53, 69, 0.1); /* Light red background for delete */
}

.dashboard-actions {
  display: flex;
  justify-content: flex-end; /* Align action buttons to the right */
  gap: var(--spacing-md);
  margin-top: var(--spacing-xl);
  padding-top: var(--spacing-lg);
  border-top: 1px solid var(--border-color);
}

/* --- 7. Modals (Exam Form, Class Form) --- */
.modal-backdrop {
  position: fixed;
  top: 0; left: 0;lg);
  font-size: var(--font-size-xl);
  color: var(--primary-color-dark);
  text-transform: uppercase; 
  letter-spacing: 1.2px;
}

/* Phần nội dung form có thể cuộn được */
.modal-form-scrollable-area {
  flex-grow: 1; 
  overflow-y: auto; 
  padding-right: var(--spacing-sm); 
  padding-bottom: var(--spacing-md); 
}

/* Tùy chỉnh thanh cuộn (chỉ hoạt động trên trình duyệt Webkit như Chrome, Safari) */
.modal-form-scrollable-area::-webkit-scrollbar {
  width: 8px;
}
.modal-form-scrollable-area::-webkit-scrollbar-track {
  background: var(--off-white);
  border-radius: 10px;
}
.modal-form-scrollable-area::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 10px;
  border: 2px solid var(--off-white); 
}
.modal-form-scrollable-area::-webkit-scrollbar-thumb:hover {
  background: var(--secondary- width: 100%; height: 100%;
  background-color: rgba(0,0,0,0.6); /* Darker overlay */
  z-index: 1500; /* High z-index */
  display: flex; justify-content: center; align-items: center;
  padding: var(--spacing-md);
  backdrop-filter: blur(10px); /* Stronger blur */
  -webkit-backdrop-filter: blur(10px);
  animation: fadeIn var(--transition-speed-normal) var(--transition-ease);
}

.modal-content {
  background-color: var(--surface-color);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-md);
  border: 1px solid var(--border-color);
  
  width: 100%;
  max-width: 800px; /* Chiều rộng tối đa cho modal */
  max-height: 95vh; /* Chiều cao tối đa của modal, để lại không gian cho thanh cuộn của trình duyệt */
  
  display: flex; 
  flex-direction: column; /* RẤT QUAN TRỌNG: Sắp xếpcolor);
}


.modal-actions {
  display: flex;
  justify-content: flex-end; 
  gap: var(--spacing-md);
  margin-top: var(--spacing-xl);
  border-top: 1px solid var(--border-color);
  padding-top: var(--spacing-lg); 
  flex-shrink: 0; 
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); 
  gap: var(--spacing-md) var(--spacing-lg);
}
.form-grid .full-width {
  grid-column: 1 / -1; 
}

/* --- 8. Animations --- */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideIn {
  from { transform: translateY(-30px); opacity: 0; } 
  to { transform: translateY(0); opacity: 1; }
} nội dung theo cột */
  
  padding: var(--spacing-xl); /* Padding bên trong modal */
  animation: slideIn var(--transition-speed-normal) var(--transition-ease);
}

.modal-content h2 {
  margin-bottom: var(--spacing-lg);
  font-size: var(--font-size-xl);
  color: var(--primary-color-dark);
  text-transform: uppercase; /* Match login screen h2 */
  letter-spacing: 1.2px;
}

/* Phần nội dung form có thể cuộn được */
.modal-form-scrollable-area {
  flex-grow: 1; /* RẤT QUAN TRỌNG: Cho phép phần này giãn nở để chiếm hết không gian trống */
  overflow-y: auto; /* RẤT QUAN TRỌNG: Kích hoạt thanh cuộn dọc khi nội dung tràn */
  padding-right: var(--spacing-sm); /* Tạo khoảng trống cho thanh cuộn để nó không đè lên nội dung */
  padding-bottom: var(--spacing-md); /* Thêm một ít padding ở cuối vùng cuộn */
}

/* Tùy chỉnh thanh cuộn (chỉ hoạt động trên trình duyệt Webkit như Chrome, Safari) */
.modal

/* --- 9. Responsive Adjustments --- */
@media (max-width: 992px) { 
  #app {
    padding: var(--spacing-lg);
  }
  .dashboard-container {
    padding: var(--spacing-lg);
  }
  .dashboard-sections {
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); 
  }
  .quiz-container {
    padding: var(--spacing-xl);
  }
  .modal-content {
    max-width: 90%;
  }
}

@media (max-width: 768px) { 
  body {
    padding: var(--spacing-md);
    align-items: flex-start; 
  }
  .container.card {
    padding: var(--spacing-lg) var(--spacing-md);
  }
  h2 {
    font-size: var(--font-size-xl);
  }
  h3 {
    font-size: var(--font-size-lg);
  }
  .btn {
    padding: var(--spacing-sm) var(--spacing-md);
    font-size: var(--font--form-scrollable-area::-webkit-scrollbar {
  width: 8px;
}
.modal-form-scrollable-area::-webkit-scrollbar-track {
  background: var(--off-white);
  border-radius: 10px;
}
.modal-form-scrollable-area::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 10px;
  border: 2px solid var(--off-white); /* Tạo khoảng đệm quanh thumb */
}
.modal-form-scrollable-area::-webkit-scrollbar-thumb:hover {
  background: var(--secondary-color);
}


.modal-actions {
  display: flex;
  justify-content: flex-end; /* Căn nút sang phải */
  gap: var(--spacing-md); /* Khoảng cách giữa các nút */
  margin-top: var(--spacing-xl); /* Khoảng cách từ nội dung form phía trên */
  border-top: 1px solid var(--border-color); /* Đường kẻ phân cách */
  padding-top: var(--spacing-lg); /* Padding phía trên đường kẻ */
  flex-shrink: 0; /* RẤT QUAN TRỌNG: Ngăn khôngsize-sm);
  }
  .dashboard-sections {
    grid-template-columns: 1fr; 
  }
  .form-grid {
    grid-template-columns: 1fr; 
    gap: var(--spacing-md);
  }
  .dashboard-actions, .modal-actions {
    flex-direction: column; 
    gap: var(--spacing-sm);
  }
  .dashboard-actions .btn, .modal-actions .btn {
    width: 100%; 
  }
  .list-item {
    flex-direction: column; 
    align-items: flex-start;
    gap: var(--spacing-sm);
  }
  .list-item-actions {
    width: 100%;
    justify-content: flex-end; 
  }
  .timer-container {
    padding: var(--spacing-sm) var(--spacing-md);
    max-width: 100%; /* Ensure timer spans full width on mobile */
    border-radius: cho phần này bị co lại khi nội dung cuộn được giãn nở */
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); /* Responsive grid for form fields */
  gap: var(--spacing-md) var(--spacing-lg);
}
.form-grid .full-width {
  grid-column: 1 / -1; /* Make element span all columns */
}

/* --- 8. Animations --- */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideIn {
  from { transform: translateY(-30px); opacity: 0; } /* Slide from top slightly */
  to { transform: translateY(0); opacity: 1; }
}

/* --- 9. Responsive Adjustments --- */
@media (max-width: 992px) { /* Medium screens (e.g., tablets) */
  #app {
    padding: var(--spacing 0; /* No rounded corners on mobile top bar */
  }
  #timer {
    font-size: var(--font-size-base);
  }

  /* Specific mobile adjustments for MC/TF options (inspired by GAS) */
  .mc-options, .tf-options {
      flex-direction: column; /* Stack options vertically on mobile */
      align-items: center; /* Center stacked options */
      gap: var(--spacing-md); /* More space between stacked options */
  }
  .mc-option, .tf-box, .numeric-option {
    width: 100%; /* Full width on small screens */
    max-width: 250px; /* Limit max width even when full width to not be too wide on slightly larger mobiles */
    margin: 0; /* Remove auto margin if stacking */
  }

  /* Specific styling for the actual T/F buttons within tf-box */
  .tf-btn {
      min-width: 50px; /* Ensure T/F buttons are not too small */
  }
}

@media (-lg);
  }
  .dashboard-container {
    padding: var(--spacing-lg);
  }
  .dashboard-sections {
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); /* Adjust columns for tablets */
  }
  .quiz-container {
    padding: var(--spacing-xl);
  }
  .modal-content {
    max-width: 90%;
  }
}

@media (max-width: 768px) { /* Small screens (e.g., phones) */
  body {
    padding: var(--spacing-md);
    align-items: flex-start; /* Ensure scrolling works vertically */
  }
  .container.card {
    padding: var(--spacing-lg) var(--spacing-md);
  }
  h2 {
    font-size: var(--font-size-xl);
  }
  h3 {
    font-size: var(--font-size-lg);
  }
  .btn {
    padding: var(--spacing-sm) var(--spacing-md);
    font-size: var(--font-size-sm);
  }
  .dashboard-sections {
    grid-templatemax-width: 480px) { 
  .container.card, .dashboard-container, .quiz-container, .modal-content {
    padding: var(--spacing-md);
  }
  h2 {
    font-size: 1.35rem; 
  }
}
```

---

### Các bước bạn cần làm sau khi cập nhật các file này:

1.  **Lưu lại tất cả các file:** Đảm bảo bạn đã lưu `firebase-functions/index.js`, `public/js/main.js` và `public/css/style.css` với các thay đổi mới nhất này.
2.  **Triển khai lại Firebase Functions:** Mở terminal, điều hướng đến thư mục gốc của dự án Firebase của bạn (nơi chứa thư mục `functions`), và chạy lệnh:
    ```bash
    firebase deploy --only functions
    ```
    Quá trình này là cần thiết để các thay đổi về logic chấm điểm và xử lý gian lận có hiệu lực trên Cloud Functions.
3.  **Xóa cache trình duyệt:** Sau khi Functions đã deploy xong, hãy xóa cache trình duyệt của bạn (hoặc mở ứng dụng trong chế độ ẩn danh/riêng tư) để đảm bảo trình duyệt tải phiên bản mới nhất của `main.js` và `style.css`.

Sau khi hoàn thành các bước này, ứng dụng của bạn sẽ có một giao diện mới mẻ, đẹp mắt, và logic chấm điểm đã được kiểm chứng hoạt động ổn định. Chúc mừng bạn đã có một ứng dụng thi online hoàn thiện và chuyên nghiệp hơn!